import{h as a}from"./chunk-OZ6SMI6T.js";import{e as s,g as i}from"./chunk-YMWLFVZR.js";i();import{ExtensionProvider as c}from"@elrondnetwork/erdjs-extension-provider";import{HWProvider as T}from"@elrondnetwork/erdjs-hw-provider";import{WalletConnectProvider as d}from"@elrondnetwork/erdjs-wallet-connect-provider";import{WalletProvider as l}from"@elrondnetwork/erdjs-web-wallet-provider";var g="/dapp/init",x=o=>{switch(o==null?void 0:o.constructor){case l:return"wallet";case d:return"walletconnect";case T:return"ledger";case c:return"extension";case t:return"";default:return"extra"}},R=o=>new l(`${o}${g}`),I=o=>s(void 0,null,function*(){if(!o.isInitialized())throw new Error("Unable to get version. Provider not initialized");let n=o.hwApp,{contractData:r,version:p}=yield n.getAppConfiguration();return{version:p,dataEnabled:r===a}}),e=o=>`Unable to perform ${o}, Provider not initialized`,t=class{init(){return Promise.resolve(!1)}login(n){throw new Error(e(`login with options: ${n}`))}logout(n){throw new Error(e(`logout with options: ${n}`))}getAddress(){throw new Error(e("getAddress"))}isInitialized(){return!1}isConnected(){return Promise.resolve(!1)}sendTransaction(n,r){throw new Error(e(`sendTransaction with transactions: ${n} options: ${r}`))}signTransaction(n,r){throw new Error(e(`signTransaction with transactions: ${n} options: ${r}`))}signTransactions(n,r){throw new Error(e(`signTransactions with transactions: ${n} options: ${r}`))}signMessage(n,r){throw new Error(e(`signTransactions with ${n} and options ${r}`))}},U=new t;export{g as a,x as b,R as c,I as d,t as e,U as f};
//# sourceMappingURL=chunk-MDPKQI3Z.js.map
