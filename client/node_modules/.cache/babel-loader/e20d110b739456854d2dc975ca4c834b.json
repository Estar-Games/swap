{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtensionProvider = void 0;\n\nconst primitives_1 = require(\"./primitives\");\n\nconst operation_1 = require(\"./operation\");\n\nconst errors_1 = require(\"./errors\");\n\nclass ExtensionProvider {\n  constructor() {\n    this.initialized = false;\n\n    if (ExtensionProvider._instance) {\n      throw new Error(\"Error: Instantiation failed: Use ExtensionProvider.getInstance() instead of new.\");\n    }\n\n    this.account = {\n      address: \"\"\n    };\n    ExtensionProvider._instance = this;\n  }\n\n  static getInstance() {\n    return ExtensionProvider._instance;\n  }\n\n  setAddress(address) {\n    this.account.address = address;\n    return ExtensionProvider._instance;\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (window && window.elrondWallet) {\n        this.initialized = true;\n      }\n\n      return this.initialized;\n    });\n  }\n\n  login() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.initialized) {\n        throw new Error(\"Extension provider is not initialised, call init() first\");\n      }\n\n      const {\n        token\n      } = options;\n      const data = token ? token : \"\";\n      yield this.startBgrMsgChannel(operation_1.Operation.Connect, data);\n      return this.account.address;\n    });\n  }\n\n  logout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.initialized) {\n        throw new Error(\"Extension provider is not initialised, call init() first\");\n      }\n\n      try {\n        yield this.startBgrMsgChannel(operation_1.Operation.Logout, this.account.address);\n      } catch (error) {\n        console.warn(\"Extension origin url is already cleared!\", error);\n      }\n\n      return true;\n    });\n  }\n\n  getAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.initialized) {\n        throw new Error(\"Extension provider is not initialised, call init() first\");\n      }\n\n      return this.account ? this.account.address : \"\";\n    });\n  }\n\n  isInitialized() {\n    return this.initialized;\n  }\n\n  isConnected() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return !!this.account;\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signedTransactions = yield this.signTransactions([transaction]);\n\n      if (signedTransactions.length != 1) {\n        throw new errors_1.ErrCannotSignSingleTransaction();\n      }\n\n      return signedTransactions[0];\n    });\n  }\n\n  signTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const extensionResponse = yield this.startBgrMsgChannel(operation_1.Operation.SignTransactions, {\n        from: this.account.address,\n        transactions: transactions.map(transaction => transaction.toPlainObject())\n      });\n\n      try {\n        for (let i = 0; i < transactions.length; i++) {\n          const transaction = transactions[i];\n          const plainSignedTransaction = extensionResponse[i];\n          transaction.applySignature(new primitives_1.Signature(plainSignedTransaction.signature), new primitives_1.Address(this.account.address));\n        }\n\n        return transactions;\n      } catch (error) {\n        throw new Error(`Transaction canceled: ${error.message}.`);\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = {\n        account: this.account.address,\n        message: message.message.toString()\n      };\n      const extensionResponse = yield this.startBgrMsgChannel(operation_1.Operation.SignMessage, data);\n      message.applySignature(new primitives_1.Signature(extensionResponse.signature), new primitives_1.Address(this.account.address));\n      return message;\n    });\n  }\n\n  cancelAction() {\n    return this.startBgrMsgChannel(operation_1.Operation.CancelAction, {});\n  }\n\n  startBgrMsgChannel(operation, connectData) {\n    return new Promise(resolve => {\n      window.postMessage({\n        target: \"erdw-inpage\",\n        type: operation,\n        data: connectData\n      }, window.origin);\n\n      const eventHandler = event => {\n        if (event.isTrusted && event.data.target === \"erdw-contentScript\") {\n          if (event.data.type === \"connectResponse\") {\n            this.account = event.data.data;\n            window.removeEventListener(\"message\", eventHandler);\n            resolve(event.data.data);\n          } else {\n            window.removeEventListener(\"message\", eventHandler);\n            resolve(event.data.data);\n          }\n        }\n      };\n\n      window.addEventListener(\"message\", eventHandler, false);\n    });\n  }\n\n}\n\nexports.ExtensionProvider = ExtensionProvider;\nExtensionProvider._instance = new ExtensionProvider();","map":{"version":3,"mappings":"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","names":["ExtensionProvider","constructor","_instance","Error","account","address","getInstance","setAddress","init","window","elrondWallet","initialized","login","options","token","data","startBgrMsgChannel","operation_1","Connect","logout","Logout","error","console","warn","getAddress","isInitialized","isConnected","signTransaction","transaction","signedTransactions","signTransactions","length","errors_1","transactions","extensionResponse","SignTransactions","from","map","toPlainObject","i","plainSignedTransaction","applySignature","primitives_1","signature","message","signMessage","toString","SignMessage","cancelAction","CancelAction","operation","connectData","Promise","resolve","postMessage","target","type","origin","eventHandler","event","isTrusted","removeEventListener","addEventListener","exports"],"sourceRoot":"","sources":["../src/extensionProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}