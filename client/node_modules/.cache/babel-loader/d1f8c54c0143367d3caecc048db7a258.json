{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BinaryCodecConstraints = exports.BinaryCodec = void 0;\n\nconst errors = __importStar(require(\"../../errors\"));\n\nconst typesystem_1 = require(\"../typesystem\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst option_1 = require(\"./option\");\n\nconst primitive_1 = require(\"./primitive\");\n\nconst list_1 = require(\"./list\");\n\nconst struct_1 = require(\"./struct\");\n\nconst enum_1 = require(\"./enum\");\n\nconst tuple_1 = require(\"./tuple\");\n\nconst arrayVec_1 = require(\"./arrayVec\");\n\nclass BinaryCodec {\n  constructor() {\n    let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.constraints = constraints || new BinaryCodecConstraints();\n    this.optionCodec = new option_1.OptionValueBinaryCodec(this);\n    this.listCodec = new list_1.ListBinaryCodec(this);\n    this.arrayCodec = new arrayVec_1.ArrayVecBinaryCodec(this);\n    this.primitiveCodec = new primitive_1.PrimitiveBinaryCodec(this);\n    this.structCodec = new struct_1.StructBinaryCodec(this);\n    this.tupleCodec = new tuple_1.TupleBinaryCodec(this);\n    this.enumCodec = new enum_1.EnumBinaryCodec(this);\n  }\n\n  decodeTopLevel(buffer, type) {\n    this.constraints.checkBufferLength(buffer);\n    let typedValue = typesystem_1.onTypeSelect(type, {\n      onOption: () => this.optionCodec.decodeTopLevel(buffer, type.getFirstTypeParameter()),\n      onList: () => this.listCodec.decodeTopLevel(buffer, type),\n      onArray: () => this.arrayCodec.decodeTopLevel(buffer, type),\n      onPrimitive: () => this.primitiveCodec.decodeTopLevel(buffer, type),\n      onStruct: () => this.structCodec.decodeTopLevel(buffer, type),\n      onTuple: () => this.tupleCodec.decodeTopLevel(buffer, type),\n      onEnum: () => this.enumCodec.decodeTopLevel(buffer, type)\n    });\n    return typedValue;\n  }\n\n  decodeNested(buffer, type) {\n    this.constraints.checkBufferLength(buffer);\n    let [typedResult, decodedLength] = typesystem_1.onTypeSelect(type, {\n      onOption: () => this.optionCodec.decodeNested(buffer, type.getFirstTypeParameter()),\n      onList: () => this.listCodec.decodeNested(buffer, type),\n      onArray: () => this.arrayCodec.decodeNested(buffer, type),\n      onPrimitive: () => this.primitiveCodec.decodeNested(buffer, type),\n      onStruct: () => this.structCodec.decodeNested(buffer, type),\n      onTuple: () => this.tupleCodec.decodeNested(buffer, type),\n      onEnum: () => this.enumCodec.decodeNested(buffer, type)\n    });\n    return [typedResult, decodedLength];\n  }\n\n  encodeNested(typedValue) {\n    utils_1.guardTrue(typedValue.getType().getCardinality().isSingular(), \"singular cardinality, thus encodable type\");\n    return typesystem_1.onTypedValueSelect(typedValue, {\n      onPrimitive: () => this.primitiveCodec.encodeNested(typedValue),\n      onOption: () => this.optionCodec.encodeNested(typedValue),\n      onList: () => this.listCodec.encodeNested(typedValue),\n      onArray: () => this.arrayCodec.encodeNested(typedValue),\n      onStruct: () => this.structCodec.encodeNested(typedValue),\n      onTuple: () => this.tupleCodec.encodeNested(typedValue),\n      onEnum: () => this.enumCodec.encodeNested(typedValue)\n    });\n  }\n\n  encodeTopLevel(typedValue) {\n    utils_1.guardTrue(typedValue.getType().getCardinality().isSingular(), \"singular cardinality, thus encodable type\");\n    return typesystem_1.onTypedValueSelect(typedValue, {\n      onPrimitive: () => this.primitiveCodec.encodeTopLevel(typedValue),\n      onOption: () => this.optionCodec.encodeTopLevel(typedValue),\n      onList: () => this.listCodec.encodeTopLevel(typedValue),\n      onArray: () => this.arrayCodec.encodeTopLevel(typedValue),\n      onStruct: () => this.structCodec.encodeTopLevel(typedValue),\n      onTuple: () => this.tupleCodec.encodeTopLevel(typedValue),\n      onEnum: () => this.enumCodec.encodeTopLevel(typedValue)\n    });\n  }\n\n}\n\nexports.BinaryCodec = BinaryCodec;\n\nclass BinaryCodecConstraints {\n  constructor(init) {\n    this.maxBufferLength = (init === null || init === void 0 ? void 0 : init.maxBufferLength) || 4096;\n    this.maxListLength = (init === null || init === void 0 ? void 0 : init.maxListLength) || 1024;\n  }\n\n  checkBufferLength(buffer) {\n    if (buffer.length > this.maxBufferLength) {\n      throw new errors.ErrCodec(`Buffer too large: ${buffer.length} > ${this.maxBufferLength}`);\n    }\n  }\n  /**\n   * This constraint avoids computer-freezing decode bugs (e.g. due to invalid ABI or struct definitions).\n   */\n\n\n  checkListLength(length) {\n    if (length > this.maxListLength) {\n      throw new errors.ErrCodec(`List too large: ${length} > ${this.maxListLength}`);\n    }\n  }\n\n}\n\nexports.BinaryCodecConstraints = BinaryCodecConstraints;","map":{"version":3,"mappings":"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","names":["BinaryCodec","constructor","constraints","BinaryCodecConstraints","optionCodec","option_1","listCodec","list_1","arrayCodec","arrayVec_1","primitiveCodec","primitive_1","structCodec","struct_1","tupleCodec","tuple_1","enumCodec","enum_1","decodeTopLevel","buffer","type","checkBufferLength","typedValue","typesystem_1","onOption","getFirstTypeParameter","onList","onArray","onPrimitive","onStruct","onTuple","onEnum","decodeNested","typedResult","decodedLength","encodeNested","utils_1","getType","getCardinality","isSingular","encodeTopLevel","exports","init","maxBufferLength","maxListLength","length","errors","ErrCodec","checkListLength"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/binary.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}