{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrNotImplemented = exports.ErrContractInteraction = exports.ErrCodec = exports.ErrCannotParseContractResults = exports.ErrMissingFieldOnEnum = exports.ErrMissingFieldOnStruct = exports.ErrTypeInferenceSystemRequiresRegularJavascriptObjects = exports.ErrTypingSystem = exports.ErrMock = exports.ErrContractHasNoAddress = exports.ErrContract = exports.ErrExpectedTransactionEventsNotFound = exports.ErrExpectedTransactionStatusNotReached = exports.ErrTransactionWatcherTimeout = exports.ErrAsyncTimerAborted = exports.ErrAsyncTimerAlreadyRunning = exports.ErrInvalidFunctionName = exports.ErrSignatureCannotCreate = exports.ErrTransactionOptionsInvalid = exports.ErrTransactionVersionInvalid = exports.ErrNonceInvalid = exports.ErrNotEnoughGas = exports.ErrAddressEmpty = exports.ErrAddressBadHrp = exports.ErrAddressCannotCreate = exports.ErrUnexpectedCondition = exports.ErrInvariantFailed = exports.ErrBadType = exports.ErrUnsupportedOperation = exports.ErrInvalidArgument = exports.Err = void 0;\n/**\n * The base class for `erdjs` exceptions (errors).\n */\n\nclass Err extends Error {\n  constructor(message, inner) {\n    super(message);\n    this.inner = undefined;\n    this.inner = inner;\n  }\n  /**\n   * Returns a pretty, friendly summary for the error or for the chain of errros (if appropriate).\n   */\n\n\n  summary() {\n    let result = [];\n    result.push({\n      name: this.name,\n      message: this.message\n    });\n    let inner = this.inner;\n\n    while (inner) {\n      result.push({\n        name: inner.name,\n        message: inner.message\n      });\n      inner = inner.inner;\n    }\n\n    return result;\n  }\n\n}\n\nexports.Err = Err;\n/**\n * Signals invalid arguments for a function, for an operation.\n */\n\nclass ErrInvalidArgument extends Err {\n  constructor(message, inner) {\n    super(`Invalid argument: ${message}`, inner);\n  }\n\n}\n\nexports.ErrInvalidArgument = ErrInvalidArgument;\n/**\n * Signals an unsupported operation.\n */\n\nclass ErrUnsupportedOperation extends Err {\n  constructor(operation) {\n    let reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"not specified\";\n    super(`Operation \"${operation}\" not supported. Reason: ${reason}`);\n  }\n\n}\n\nexports.ErrUnsupportedOperation = ErrUnsupportedOperation;\n/**\n * Signals the provisioning of objects of unexpected (bad) types.\n */\n\nclass ErrBadType extends Err {\n  constructor(name, type, value) {\n    super(`Bad type of \"${name}\": ${value}. Expected type: ${type}`);\n  }\n\n}\n\nexports.ErrBadType = ErrBadType;\n/**\n * Signals that an invariant failed.\n */\n\nclass ErrInvariantFailed extends Err {\n  constructor(message) {\n    super(`Invariant failed: [${message}]`);\n  }\n\n}\n\nexports.ErrInvariantFailed = ErrInvariantFailed;\n/**\n * Signals an unexpected condition.\n */\n\nclass ErrUnexpectedCondition extends Err {\n  constructor(message) {\n    super(`Unexpected condition: [${message}]`);\n  }\n\n}\n\nexports.ErrUnexpectedCondition = ErrUnexpectedCondition;\n/**\n * Signals issues with {@link Address} instantiation.\n */\n\nclass ErrAddressCannotCreate extends Err {\n  constructor(input, inner) {\n    let message = `Cannot create address from: ${input}`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrAddressCannotCreate = ErrAddressCannotCreate;\n/**\n * Signals issues with the HRP of an {@link Address}.\n */\n\nclass ErrAddressBadHrp extends Err {\n  constructor(expected, got) {\n    super(`Wrong address HRP. Expected: ${expected}, got ${got}`);\n  }\n\n}\n\nexports.ErrAddressBadHrp = ErrAddressBadHrp;\n/**\n * Signals the presence of an empty / invalid address.\n */\n\nclass ErrAddressEmpty extends Err {\n  constructor() {\n    super(`Address is empty`);\n  }\n\n}\n\nexports.ErrAddressEmpty = ErrAddressEmpty;\n/**\n * Signals an invalid value for {@link GasLimit} objects.\n */\n\nclass ErrNotEnoughGas extends Err {\n  constructor(value) {\n    super(`Not enough gas provided: ${value}`);\n  }\n\n}\n\nexports.ErrNotEnoughGas = ErrNotEnoughGas;\n/**\n * Signals an invalid value for {@link Nonce} objects.\n */\n\nclass ErrNonceInvalid extends Err {\n  constructor(value) {\n    super(`Invalid nonce: ${value}`);\n  }\n\n}\n\nexports.ErrNonceInvalid = ErrNonceInvalid;\n/**\n * Signals an invalid value for {@link TransactionVersion} objects.\n */\n\nclass ErrTransactionVersionInvalid extends Err {\n  constructor(value) {\n    super(`Invalid transaction version: ${value}`);\n  }\n\n}\n\nexports.ErrTransactionVersionInvalid = ErrTransactionVersionInvalid;\n/**\n * Signals an invalid value for {@link TransactionOptions} objects.\n */\n\nclass ErrTransactionOptionsInvalid extends Err {\n  constructor(value) {\n    super(`Invalid transaction options: ${value}`);\n  }\n\n}\n\nexports.ErrTransactionOptionsInvalid = ErrTransactionOptionsInvalid;\n/**\n * Signals an error related to signing a message (a transaction).\n */\n\nclass ErrSignatureCannotCreate extends Err {\n  constructor(input, inner) {\n    let message = `Cannot create signature from: ${input}`;\n    super(message, inner);\n  }\n\n}\n\nexports.ErrSignatureCannotCreate = ErrSignatureCannotCreate;\n/**\n * Signals an invalid value for the name of a {@link ContractFunction}.\n */\n\nclass ErrInvalidFunctionName extends Err {\n  constructor() {\n    super(`Invalid function name`);\n  }\n\n}\n\nexports.ErrInvalidFunctionName = ErrInvalidFunctionName;\n/**\n * Signals a failed operation, since the Timer is already running.\n */\n\nclass ErrAsyncTimerAlreadyRunning extends Err {\n  constructor() {\n    super(\"Async timer already running\");\n  }\n\n}\n\nexports.ErrAsyncTimerAlreadyRunning = ErrAsyncTimerAlreadyRunning;\n/**\n * Signals a failed operation, since the Timer has been aborted.\n */\n\nclass ErrAsyncTimerAborted extends Err {\n  constructor() {\n    super(\"Async timer aborted\");\n  }\n\n}\n\nexports.ErrAsyncTimerAborted = ErrAsyncTimerAborted;\n/**\n * Signals a timout for a {@link TransactionWatcher}.\n */\n\nclass ErrTransactionWatcherTimeout extends Err {\n  constructor() {\n    super(`TransactionWatcher has timed out`);\n  }\n\n}\n\nexports.ErrTransactionWatcherTimeout = ErrTransactionWatcherTimeout;\n/**\n * Signals an issue related to waiting for a specific {@link TransactionStatus}.\n */\n\nclass ErrExpectedTransactionStatusNotReached extends Err {\n  constructor() {\n    super(`Expected transaction status not reached`);\n  }\n\n}\n\nexports.ErrExpectedTransactionStatusNotReached = ErrExpectedTransactionStatusNotReached;\n/**\n * Signals an issue related to waiting for specific transaction events.\n */\n\nclass ErrExpectedTransactionEventsNotFound extends Err {\n  constructor() {\n    super(`Expected transaction events not found`);\n  }\n\n}\n\nexports.ErrExpectedTransactionEventsNotFound = ErrExpectedTransactionEventsNotFound;\n/**\n * Signals a generic error in the context of Smart Contracts.\n */\n\nclass ErrContract extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrContract = ErrContract;\n\nclass ErrContractHasNoAddress extends ErrContract {\n  constructor() {\n    super(`\nThe smart contract has no address set. Make sure you provide the address in the constructor, or call setAddress() appropriately.\nIf you need to recompute the address of the contract, make use of SmartContract.computeAddress() (static method). \n`);\n  }\n\n}\n\nexports.ErrContractHasNoAddress = ErrContractHasNoAddress;\n/**\n * Signals an error thrown by the mock-like test objects.\n */\n\nclass ErrMock extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrMock = ErrMock;\n/**\n * Signals a generic type error.\n */\n\nclass ErrTypingSystem extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrTypingSystem = ErrTypingSystem;\n/**\n * Signals a usage error related to \"contract.methods\" vs. \"contract.methodsExplicit\".\n */\n\nclass ErrTypeInferenceSystemRequiresRegularJavascriptObjects extends ErrTypingSystem {\n  constructor(index) {\n    super(`\nargument at position ${index} seems to be a TypedValue. The automatic type inference system requires regular javascript objects as input.\nThis error might occur when you pass a TypedValue to contract.methods.myFunction([...]). For passing TypedValues instead of regular javascript objects, and bypass the automatic type inference system, use contract.methodsExplicit.myFunction([...]) instead.\nAlso see https://github.com/ElrondNetwork/elrond-sdk-erdjs/pull/187.\n`);\n  }\n\n}\n\nexports.ErrTypeInferenceSystemRequiresRegularJavascriptObjects = ErrTypeInferenceSystemRequiresRegularJavascriptObjects;\n/**\n * Signals a missing field on a struct.\n */\n\nclass ErrMissingFieldOnStruct extends Err {\n  constructor(fieldName, structName) {\n    super(`field ${fieldName} does not exist on struct ${structName}`);\n  }\n\n}\n\nexports.ErrMissingFieldOnStruct = ErrMissingFieldOnStruct;\n/**\n * Signals a missing field on an enum.\n */\n\nclass ErrMissingFieldOnEnum extends Err {\n  constructor(fieldName, enumName) {\n    super(`field ${fieldName} does not exist on enum ${enumName}`);\n  }\n\n}\n\nexports.ErrMissingFieldOnEnum = ErrMissingFieldOnEnum;\n/**\n * Signals an error when parsing the contract results.\n */\n\nclass ErrCannotParseContractResults extends Err {\n  constructor(details) {\n    super(`cannot parse contract results: ${details}`);\n  }\n\n}\n\nexports.ErrCannotParseContractResults = ErrCannotParseContractResults;\n/**\n * Signals a generic codec (encode / decode) error.\n */\n\nclass ErrCodec extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrCodec = ErrCodec;\n/**\n * Signals a generic contract interaction error.\n */\n\nclass ErrContractInteraction extends Err {\n  constructor(message) {\n    super(message);\n  }\n\n}\n\nexports.ErrContractInteraction = ErrContractInteraction;\n/**\n * Signals that a method is not yet implemented\n */\n\nclass ErrNotImplemented extends Err {\n  constructor() {\n    super(\"Method not yet implemented\");\n  }\n\n}\n\nexports.ErrNotImplemented = ErrNotImplemented;","map":{"version":3,"mappings":"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","names":["Err","Error","constructor","message","inner","undefined","summary","result","push","name","exports","ErrInvalidArgument","ErrUnsupportedOperation","operation","reason","ErrBadType","type","value","ErrInvariantFailed","ErrUnexpectedCondition","ErrAddressCannotCreate","input","ErrAddressBadHrp","expected","got","ErrAddressEmpty","ErrNotEnoughGas","ErrNonceInvalid","ErrTransactionVersionInvalid","ErrTransactionOptionsInvalid","ErrSignatureCannotCreate","ErrInvalidFunctionName","ErrAsyncTimerAlreadyRunning","ErrAsyncTimerAborted","ErrTransactionWatcherTimeout","ErrExpectedTransactionStatusNotReached","ErrExpectedTransactionEventsNotFound","ErrContract","ErrContractHasNoAddress","ErrMock","ErrTypingSystem","ErrTypeInferenceSystemRequiresRegularJavascriptObjects","index","ErrMissingFieldOnStruct","fieldName","structName","ErrMissingFieldOnEnum","enumName","ErrCannotParseContractResults","details","ErrCodec","ErrContractInteraction","ErrNotImplemented"],"sourceRoot":"","sources":["../src/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}