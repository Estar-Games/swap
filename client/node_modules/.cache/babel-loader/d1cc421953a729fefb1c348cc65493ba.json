{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GasEstimator = exports.DefaultGasConfiguration = void 0;\n/**\n * This is mirroring (on a best efforts basis) the network's gas configuration & gas schedule:\n *  - https://gateway.elrond.com/network/config\n *  - https://github.com/ElrondNetwork/elrond-config-mainnet/tree/master/gasSchedules\n *  - https://github.com/ElrondNetwork/elrond-config-mainnet/blob/master/enableEpochs.toml#L200\n */\n\nexports.DefaultGasConfiguration = {\n  minGasLimit: 50000,\n  gasPerDataByte: 1500,\n  gasCostESDTTransfer: 200000,\n  gasCostESDTNFTTransfer: 200000,\n  gasCostESDTNFTMultiTransfer: 200000\n}; // Additional gas to account for eventual increases in gas requirements (thus avoid fast-breaking changes in clients of erdjs).\n\nconst ADDITIONAL_GAS_FOR_ESDT_TRANSFER = 100000; // Additional gas to account for extra blockchain operations (e.g. data movement (between accounts) for NFTs), \n// and for eventual increases in gas requirements (thus avoid fast-breaking changes in clients of erdjs).\n\nconst ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER = 800000;\n\nclass GasEstimator {\n  constructor(gasConfiguration) {\n    this.gasConfiguration = gasConfiguration || exports.DefaultGasConfiguration;\n  }\n\n  forEGLDTransfer(dataLength) {\n    const gasLimit = this.gasConfiguration.minGasLimit + this.gasConfiguration.gasPerDataByte * dataLength;\n    return gasLimit;\n  }\n\n  forESDTTransfer(dataLength) {\n    const gasLimit = this.gasConfiguration.minGasLimit + this.gasConfiguration.gasCostESDTTransfer + this.gasConfiguration.gasPerDataByte * dataLength + ADDITIONAL_GAS_FOR_ESDT_TRANSFER;\n    return gasLimit;\n  }\n\n  forESDTNFTTransfer(dataLength) {\n    const gasLimit = this.gasConfiguration.minGasLimit + this.gasConfiguration.gasCostESDTNFTTransfer + this.gasConfiguration.gasPerDataByte * dataLength + ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER;\n    return gasLimit;\n  }\n\n  forMultiESDTNFTTransfer(dataLength, numTransfers) {\n    const gasLimit = this.gasConfiguration.minGasLimit + (this.gasConfiguration.gasCostESDTNFTMultiTransfer + ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER) * numTransfers + this.gasConfiguration.gasPerDataByte * dataLength;\n    return gasLimit;\n  }\n\n}\n\nexports.GasEstimator = GasEstimator;","map":{"version":3,"mappings":";;;;;;AAQA;;;;;;;AAMaA,kCAA6C;EACtDC,WAAW,EAAE,KADyC;EAEtDC,cAAc,EAAE,IAFsC;EAGtDC,mBAAmB,EAAE,MAHiC;EAItDC,sBAAsB,EAAE,MAJ8B;EAKtDC,2BAA2B,EAAE;AALyB,CAA7C,C,CAQb;;AACA,MAAMC,gCAAgC,GAAG,MAAzC,C,CAEA;AACA;;AACA,MAAMC,oCAAoC,GAAG,MAA7C;;AAEA,MAAaC,YAAb,CAAyB;EAGrBC,YAAYC,gBAAZ,EAAgD;IAC5C,KAAKA,gBAAL,GAAwBA,gBAAgB,IAAIV,+BAA5C;EACH;;EAEDW,eAAe,CAACC,UAAD,EAAmB;IAC9B,MAAMC,QAAQ,GACV,KAAKH,gBAAL,CAAsBT,WAAtB,GACA,KAAKS,gBAAL,CAAsBR,cAAtB,GAAuCU,UAF3C;IAIA,OAAOC,QAAP;EACH;;EAEDC,eAAe,CAACF,UAAD,EAAmB;IAC9B,MAAMC,QAAQ,GACV,KAAKH,gBAAL,CAAsBT,WAAtB,GACA,KAAKS,gBAAL,CAAsBP,mBADtB,GAEA,KAAKO,gBAAL,CAAsBR,cAAtB,GAAuCU,UAFvC,GAGAN,gCAJJ;IAMA,OAAOO,QAAP;EACH;;EAEDE,kBAAkB,CAACH,UAAD,EAAmB;IACjC,MAAMC,QAAQ,GACV,KAAKH,gBAAL,CAAsBT,WAAtB,GACA,KAAKS,gBAAL,CAAsBN,sBADtB,GAEA,KAAKM,gBAAL,CAAsBR,cAAtB,GAAuCU,UAFvC,GAGAL,oCAJJ;IAMA,OAAOM,QAAP;EACH;;EAEDG,uBAAuB,CAACJ,UAAD,EAAqBK,YAArB,EAAyC;IAC5D,MAAMJ,QAAQ,GACV,KAAKH,gBAAL,CAAsBT,WAAtB,GACA,CAAC,KAAKS,gBAAL,CAAsBL,2BAAtB,GAAoDE,oCAArD,IAA6FU,YAD7F,GAEA,KAAKP,gBAAL,CAAsBR,cAAtB,GAAuCU,UAH3C;IAKA,OAAOC,QAAP;EACH;;AA1CoB;;AAAzBb","names":["exports","minGasLimit","gasPerDataByte","gasCostESDTTransfer","gasCostESDTNFTTransfer","gasCostESDTNFTMultiTransfer","ADDITIONAL_GAS_FOR_ESDT_TRANSFER","ADDITIONAL_GAS_FOR_ESDT_NFT_TRANSFER","GasEstimator","constructor","gasConfiguration","forEGLDTransfer","dataLength","gasLimit","forESDTTransfer","forESDTNFTTransfer","forMultiESDTNFTTransfer","numTransfers"],"sourceRoot":"","sources":["../src/gasEstimator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}