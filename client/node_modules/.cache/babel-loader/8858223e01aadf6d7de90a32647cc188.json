{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeSerializer = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst typesystem_1 = require(\"./typesystem\");\n\nconst argumentErrorContext_1 = require(\"./argumentErrorContext\");\n\nconst typesystem_2 = require(\"./typesystem\");\n\nconst address_1 = require(\"../address\");\n\nconst errors_1 = require(\"../errors\");\n\nconst utils_codec_1 = require(\"../utils.codec\");\n\nvar NativeSerializer;\n\n(function (NativeSerializer) {\n  /**\n   * Interprets a set of native javascript values into a set of typed values, given parameter definitions.\n   */\n  function nativeToTypedValues(args, endpoint) {\n    args = args || [];\n    assertNotTypedValues(args);\n    args = handleVariadicArgsAndRePack(args, endpoint);\n    let parameters = endpoint.input;\n    let values = [];\n\n    for (let i = 0; i < parameters.length; i++) {\n      let parameter = parameters[i];\n      let errorContext = new argumentErrorContext_1.ArgumentErrorContext(endpoint.name, i, parameter);\n      let value = convertToTypedValue(args[i], parameter.type, errorContext);\n      values.push(value);\n    }\n\n    return values;\n  }\n\n  NativeSerializer.nativeToTypedValues = nativeToTypedValues;\n\n  function assertNotTypedValues(args) {\n    for (let i = 0; i < args.length; i++) {\n      let arg = args[i];\n\n      if (arg && arg.belongsToTypesystem) {\n        throw new errors_1.ErrTypeInferenceSystemRequiresRegularJavascriptObjects(i);\n      }\n    }\n  }\n\n  function handleVariadicArgsAndRePack(args, endpoint) {\n    let parameters = endpoint.input;\n    let {\n      min,\n      max,\n      variadic\n    } = getArgumentsCardinality(parameters);\n\n    if (!(min <= args.length && args.length <= max)) {\n      throw new errors_1.ErrInvalidArgument(`Wrong number of arguments for endpoint ${endpoint.name}: expected between ${min} and ${max} arguments, have ${args.length}`);\n    }\n\n    if (variadic) {\n      let lastArgIndex = parameters.length - 1;\n      let lastArg = args.slice(lastArgIndex);\n      args[lastArgIndex] = lastArg;\n    }\n\n    return args;\n  } // A function may have one of the following formats:\n  // f(arg1, arg2, optional<arg3>, optional<arg4>) returns { min: 2, max: 4, variadic: false }\n  // f(arg1, variadic<bytes>) returns { min: 1, max: Infinity, variadic: true }\n  // f(arg1, arg2, optional<arg3>, arg4, optional<arg5>, variadic<bytes>) returns { min: 2, max: Infinity, variadic: true }\n\n\n  function getArgumentsCardinality(parameters) {\n    let reversed = [...parameters].reverse(); // keep the original unchanged\n\n    let min = parameters.length;\n    let max = parameters.length;\n    let variadic = false;\n\n    if (reversed.length > 0 && reversed[0].type.getCardinality().isComposite()) {\n      max = Infinity;\n      variadic = true;\n    }\n\n    for (let parameter of reversed) {\n      if (parameter.type.getCardinality().isSingular()) {\n        break;\n      }\n\n      min -= 1;\n    }\n\n    return {\n      min,\n      max,\n      variadic\n    };\n  }\n\n  function convertToTypedValue(native, type, errorContext) {\n    if (type instanceof typesystem_1.OptionType) {\n      return toOptionValue(native, type, errorContext);\n    }\n\n    if (type instanceof typesystem_1.OptionalType) {\n      return toOptionalValue(native, type, errorContext);\n    }\n\n    if (type instanceof typesystem_1.VariadicType) {\n      return toVariadicValue(native, type, errorContext);\n    }\n\n    if (type instanceof typesystem_1.CompositeType) {\n      return toCompositeValue(native, type, errorContext);\n    }\n\n    if (type instanceof typesystem_1.TupleType) {\n      return toTupleValue(native, type, errorContext);\n    }\n\n    if (type instanceof typesystem_2.StructType) {\n      return toStructValue(native, type, errorContext);\n    }\n\n    if (type instanceof typesystem_1.ListType) {\n      return toListValue(native, type, errorContext);\n    }\n\n    if (type instanceof typesystem_1.PrimitiveType) {\n      return toPrimitive(native, type, errorContext);\n    }\n\n    errorContext.throwError(`convertToTypedValue: unhandled type ${type}`);\n  }\n\n  function toOptionValue(native, type, errorContext) {\n    if (native == null) {\n      return typesystem_1.OptionValue.newMissing();\n    }\n\n    let converted = convertToTypedValue(native, type.getFirstTypeParameter(), errorContext);\n    return typesystem_1.OptionValue.newProvided(converted);\n  }\n\n  function toOptionalValue(native, type, errorContext) {\n    if (native == null) {\n      return new typesystem_1.OptionalValue(type);\n    }\n\n    let converted = convertToTypedValue(native, type.getFirstTypeParameter(), errorContext);\n    return new typesystem_1.OptionalValue(type, converted);\n  }\n\n  function toVariadicValue(native, type, errorContext) {\n    if (native == null) {\n      native = [];\n    }\n\n    if (native.map === undefined) {\n      errorContext.convertError(native, \"Variadic\");\n    }\n\n    let converted = native.map(function (item) {\n      return convertToTypedValue(item, type.getFirstTypeParameter(), errorContext);\n    });\n    return new typesystem_1.VariadicValue(type, converted);\n  }\n\n  function toListValue(native, type, errorContext) {\n    if (native.map === undefined) {\n      errorContext.convertError(native, \"List\");\n    }\n\n    let converted = native.map(function (item) {\n      return convertToTypedValue(item, type.getFirstTypeParameter(), errorContext);\n    });\n    return new typesystem_1.List(type, converted);\n  }\n\n  function toCompositeValue(native, type, errorContext) {\n    let typedValues = [];\n    let typeParameters = type.getTypeParameters();\n    errorContext.guardSameLength(native, typeParameters);\n\n    for (let i = 0; i < typeParameters.length; i++) {\n      typedValues.push(convertToTypedValue(native[i], typeParameters[i], errorContext));\n    }\n\n    return new typesystem_1.CompositeValue(type, typedValues);\n  }\n\n  function toTupleValue(native, type, errorContext) {\n    let typedValues = [];\n    const fields = type.getFieldsDefinitions();\n    errorContext.guardSameLength(native, fields);\n\n    for (let i = 0; i < fields.length; i++) {\n      typedValues.push(convertToTypedValue(native[i], fields[i].type, errorContext));\n    }\n\n    return typesystem_2.Tuple.fromItems(typedValues);\n  }\n\n  function toStructValue(native, type, errorContext) {\n    let structFieldValues = [];\n    const fields = type.getFieldsDefinitions();\n\n    for (let i = 0; i < fields.length; i++) {\n      const fieldName = fields[i].name;\n      errorContext.guardHasField(native, fieldName);\n      const fieldNativeValue = native[fieldName];\n      const fieldTypedValue = convertToTypedValue(fieldNativeValue, fields[i].type, errorContext);\n      structFieldValues.push(new typesystem_2.Field(fieldTypedValue, fieldName));\n    }\n\n    return new typesystem_2.Struct(type, structFieldValues);\n  }\n\n  function toPrimitive(native, type, errorContext) {\n    if (type instanceof typesystem_1.NumericalType) {\n      let number = new bignumber_js_1.default(native);\n      return convertNumericalType(number, type, errorContext);\n    }\n\n    if (type instanceof typesystem_1.BytesType) {\n      return convertNativeToBytesValue(native, errorContext);\n    }\n\n    if (type instanceof typesystem_1.AddressType) {\n      return new typesystem_1.AddressValue(convertNativeToAddress(native, errorContext));\n    }\n\n    if (type instanceof typesystem_1.BooleanType) {\n      return new typesystem_1.BooleanValue(native);\n    }\n\n    if (type instanceof typesystem_1.TokenIdentifierType) {\n      return new typesystem_1.TokenIdentifierValue(convertNativeToString(native, errorContext));\n    }\n\n    errorContext.throwError(`(function: toPrimitive) unsupported type ${type}`);\n  }\n\n  function convertNativeToBytesValue(native, errorContext) {\n    const innerValue = native.valueOf();\n\n    if (native === undefined) {\n      errorContext.convertError(native, \"BytesValue\");\n    }\n\n    if (native instanceof Buffer) {\n      return new typesystem_1.BytesValue(native);\n    }\n\n    if (typeof native === \"string\") {\n      return typesystem_1.BytesValue.fromUTF8(native);\n    }\n\n    if (innerValue instanceof Buffer) {\n      return new typesystem_1.BytesValue(innerValue);\n    }\n\n    if (typeof innerValue === \"number\") {\n      return typesystem_1.BytesValue.fromHex(utils_codec_1.numberToPaddedHex(innerValue));\n    }\n\n    errorContext.convertError(native, \"BytesValue\");\n  }\n\n  function convertNativeToString(native, errorContext) {\n    if (native === undefined) {\n      errorContext.convertError(native, \"Buffer\");\n    }\n\n    if (native instanceof Buffer) {\n      return native.toString();\n    }\n\n    if (typeof native === \"string\") {\n      return native;\n    }\n\n    errorContext.convertError(native, \"Buffer\");\n  }\n\n  function convertNativeToAddress(native, errorContext) {\n    if (native.bech32) {\n      return native;\n    }\n\n    if (native.getAddress) {\n      return native.getAddress();\n    }\n\n    switch (native.constructor) {\n      case Buffer:\n      case String:\n        return new address_1.Address(native);\n\n      default:\n        errorContext.convertError(native, \"Address\");\n    }\n  }\n\n  NativeSerializer.convertNativeToAddress = convertNativeToAddress;\n\n  function convertNumericalType(number, type, errorContext) {\n    switch (type.constructor) {\n      case typesystem_1.U8Type:\n        return new typesystem_1.U8Value(number);\n\n      case typesystem_1.I8Type:\n        return new typesystem_1.I8Value(number);\n\n      case typesystem_1.U16Type:\n        return new typesystem_1.U16Value(number);\n\n      case typesystem_1.I16Type:\n        return new typesystem_1.I16Value(number);\n\n      case typesystem_1.U32Type:\n        return new typesystem_1.U32Value(number);\n\n      case typesystem_1.I32Type:\n        return new typesystem_1.I32Value(number);\n\n      case typesystem_1.U64Type:\n        return new typesystem_1.U64Value(number);\n\n      case typesystem_1.I64Type:\n        return new typesystem_1.I64Value(number);\n\n      case typesystem_1.BigUIntType:\n        return new typesystem_1.BigUIntValue(number);\n\n      case typesystem_1.BigIntType:\n        return new typesystem_1.BigIntValue(number);\n\n      default:\n        errorContext.unhandledType(\"convertNumericalType\", type);\n    }\n  }\n})(NativeSerializer = exports.NativeSerializer || (exports.NativeSerializer = {}));","map":{"version":3,"mappings":"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","names":["NativeSerializer","nativeToTypedValues","args","endpoint","assertNotTypedValues","handleVariadicArgsAndRePack","parameters","input","values","i","length","parameter","errorContext","argumentErrorContext_1","name","value","convertToTypedValue","type","push","arg","belongsToTypesystem","errors_1","min","max","variadic","getArgumentsCardinality","lastArgIndex","lastArg","slice","reversed","reverse","getCardinality","isComposite","Infinity","isSingular","native","typesystem_1","toOptionValue","toOptionalValue","toVariadicValue","toCompositeValue","toTupleValue","typesystem_2","toStructValue","toListValue","toPrimitive","throwError","newMissing","converted","getFirstTypeParameter","newProvided","map","undefined","convertError","item","typedValues","typeParameters","getTypeParameters","guardSameLength","fields","getFieldsDefinitions","fromItems","structFieldValues","fieldName","guardHasField","fieldNativeValue","fieldTypedValue","number","bignumber_js_1","convertNumericalType","convertNativeToBytesValue","convertNativeToAddress","convertNativeToString","innerValue","valueOf","Buffer","fromUTF8","fromHex","utils_codec_1","toString","bech32","getAddress","constructor","String","address_1","unhandledType","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/nativeSerializer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}