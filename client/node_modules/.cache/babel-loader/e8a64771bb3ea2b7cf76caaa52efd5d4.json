{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProtoSerializer = void 0;\n\nconst errors = __importStar(require(\"../errors\"));\n\nconst utils_1 = require(\"../smartcontracts/codec/utils\");\n\nconst compiled_1 = require(\"./compiled\");\n\nconst constants_1 = require(\"../constants\");\n\nconst address_1 = require(\"../address\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n/**\n * Hides away the serialization complexity, for each type of object (e.g. transactions).\n \n * The implementation is non-generic, but practical: there's a pair of `serialize` / `deserialize` method for each type of object.\n */\n\n\nclass ProtoSerializer {\n  /**\n   * Serializes a Transaction object to a Buffer. Handles low-level conversion logic and field-mappings as well.\n   */\n  serializeTransaction(transaction) {\n    let receiverPubkey = new address_1.Address(transaction.getReceiver().bech32()).pubkey();\n    let senderPubkey = new address_1.Address(transaction.getSender().bech32()).pubkey();\n    let protoTransaction = new compiled_1.proto.Transaction({\n      // elrond-go's serializer handles nonce == 0 differently, thus we treat 0 as \"undefined\".\n      Nonce: transaction.getNonce().valueOf() ? transaction.getNonce().valueOf() : undefined,\n      Value: this.serializeTransactionValue(transaction.getValue()),\n      RcvAddr: receiverPubkey,\n      RcvUserName: null,\n      SndAddr: senderPubkey,\n      SndUserName: null,\n      GasPrice: transaction.getGasPrice().valueOf(),\n      GasLimit: transaction.getGasLimit().valueOf(),\n      Data: transaction.getData().length() == 0 ? null : transaction.getData().valueOf(),\n      ChainID: Buffer.from(transaction.getChainID().valueOf()),\n      Version: transaction.getVersion().valueOf(),\n      Signature: Buffer.from(transaction.getSignature().hex(), \"hex\")\n    });\n\n    if (transaction.getOptions().valueOf() !== constants_1.TRANSACTION_OPTIONS_DEFAULT) {\n      protoTransaction.Options = transaction.getOptions().valueOf();\n    }\n\n    let encoded = compiled_1.proto.Transaction.encode(protoTransaction).finish();\n    let buffer = Buffer.from(encoded);\n    return buffer;\n  }\n  /**\n   * Custom serialization, compatible with elrond-go.\n   */\n\n\n  serializeTransactionValue(transactionValue) {\n    let value = new bignumber_js_1.default(transactionValue.toString());\n\n    if (value.isZero()) {\n      return Buffer.from([0, 0]);\n    } // Will retain the magnitude, as a buffer.\n\n\n    let buffer = utils_1.bigIntToBuffer(value); // We prepend the \"positive\" sign marker, in order to be compatible with Elrond Go's \"sign & magnitude\" proto-representation (a custom one).\n\n    buffer = Buffer.concat([Buffer.from([0x00]), buffer]);\n    return buffer;\n  }\n\n  deserializeTransaction(_buffer) {\n    // Not needed (yet).\n    throw new errors.ErrUnsupportedOperation(\"deserializeTransaction\");\n  }\n\n}\n\nexports.ProtoSerializer = ProtoSerializer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;AAEA;;;;;;;AAKA,MAAaA,eAAb,CAA4B;EACxB;;;EAGAC,oBAAoB,CAACC,WAAD,EAAyB;IACzC,IAAIC,cAAc,GAAG,IAAIC,iBAAJ,CAAYF,WAAW,CAACG,WAAZ,GAA0BC,MAA1B,EAAZ,EAAgDC,MAAhD,EAArB;IACA,IAAIC,YAAY,GAAG,IAAIJ,iBAAJ,CAAYF,WAAW,CAACO,SAAZ,GAAwBH,MAAxB,EAAZ,EAA8CC,MAA9C,EAAnB;IAEA,IAAIG,gBAAgB,GAAG,IAAIC,iBAAMC,WAAV,CAAsB;MACzC;MACAC,KAAK,EAAEX,WAAW,CAACY,QAAZ,GAAuBC,OAAvB,KAAmCb,WAAW,CAACY,QAAZ,GAAuBC,OAAvB,EAAnC,GAAsEC,SAFpC;MAGzCC,KAAK,EAAE,KAAKC,yBAAL,CAA+BhB,WAAW,CAACiB,QAAZ,EAA/B,CAHkC;MAIzCC,OAAO,EAAEjB,cAJgC;MAKzCkB,WAAW,EAAE,IAL4B;MAMzCC,OAAO,EAAEd,YANgC;MAOzCe,WAAW,EAAE,IAP4B;MAQzCC,QAAQ,EAAEtB,WAAW,CAACuB,WAAZ,GAA0BV,OAA1B,EAR+B;MASzCW,QAAQ,EAAExB,WAAW,CAACyB,WAAZ,GAA0BZ,OAA1B,EAT+B;MAUzCa,IAAI,EAAE1B,WAAW,CAAC2B,OAAZ,GAAsBC,MAAtB,MAAkC,CAAlC,GAAsC,IAAtC,GAA6C5B,WAAW,CAAC2B,OAAZ,GAAsBd,OAAtB,EAVV;MAWzCgB,OAAO,EAAEC,MAAM,CAACC,IAAP,CAAY/B,WAAW,CAACgC,UAAZ,GAAyBnB,OAAzB,EAAZ,CAXgC;MAYzCoB,OAAO,EAAEjC,WAAW,CAACkC,UAAZ,GAAyBrB,OAAzB,EAZgC;MAazCsB,SAAS,EAAEL,MAAM,CAACC,IAAP,CAAY/B,WAAW,CAACoC,YAAZ,GAA2BC,GAA3B,EAAZ,EAA8C,KAA9C;IAb8B,CAAtB,CAAvB;;IAgBA,IAAKrC,WAAW,CAACsC,UAAZ,GAAyBzB,OAAzB,OAAuC0B,uCAA5C,EAA0E;MACtE/B,gBAAgB,CAACgC,OAAjB,GAA2BxC,WAAW,CAACsC,UAAZ,GAAyBzB,OAAzB,EAA3B;IACH;;IAED,IAAI4B,OAAO,GAAGhC,iBAAMC,WAAN,CAAkBgC,MAAlB,CAAyBlC,gBAAzB,EAA2CmC,MAA3C,EAAd;IACA,IAAIC,MAAM,GAAGd,MAAM,CAACC,IAAP,CAAYU,OAAZ,CAAb;IACA,OAAOG,MAAP;EACH;EAED;;;;;EAGQ5B,yBAAyB,CAAC6B,gBAAD,EAAoC;IACjE,IAAIC,KAAK,GAAG,IAAIC,sBAAJ,CAAcF,gBAAgB,CAACG,QAAjB,EAAd,CAAZ;;IACA,IAAIF,KAAK,CAACG,MAAN,EAAJ,EAAoB;MAChB,OAAOnB,MAAM,CAACC,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,CAAZ,CAAP;IACH,CAJgE,CAMjE;;;IACA,IAAIa,MAAM,GAAGM,uBAAeJ,KAAf,CAAb,CAPiE,CAQjE;;IACAF,MAAM,GAAGd,MAAM,CAACqB,MAAP,CAAc,CAACrB,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAD,EAAsBa,MAAtB,CAAd,CAAT;IACA,OAAOA,MAAP;EACH;;EAEDQ,sBAAsB,CAACC,OAAD,EAAgB;IAClC;IACA,MAAM,IAAIC,MAAM,CAACC,uBAAX,CAAmC,wBAAnC,CAAN;EACH;;AApDuB;;AAA5BC","names":["ProtoSerializer","serializeTransaction","transaction","receiverPubkey","address_1","getReceiver","bech32","pubkey","senderPubkey","getSender","protoTransaction","compiled_1","Transaction","Nonce","getNonce","valueOf","undefined","Value","serializeTransactionValue","getValue","RcvAddr","RcvUserName","SndAddr","SndUserName","GasPrice","getGasPrice","GasLimit","getGasLimit","Data","getData","length","ChainID","Buffer","from","getChainID","Version","getVersion","Signature","getSignature","hex","getOptions","constants_1","Options","encoded","encode","finish","buffer","transactionValue","value","bignumber_js_1","toString","isZero","utils_1","concat","deserializeTransaction","_buffer","errors","ErrUnsupportedOperation","exports"],"sourceRoot":"","sources":["../../src/proto/serializer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}