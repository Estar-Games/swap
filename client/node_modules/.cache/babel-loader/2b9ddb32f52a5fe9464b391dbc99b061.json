{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenTransferProperties = exports.TransactionMetadataTransfer = exports.TransactionMetadata = exports.TransactionToDecode = exports.TransactionDecoder = void 0;\n\nconst bech32_1 = require(\"bech32\");\n\nclass TransactionDecoder {\n  getTransactionMetadata(transaction) {\n    const metadata = this.getNormalTransactionMetadata(transaction);\n    const esdtMetadata = this.getEsdtTransactionMetadata(metadata);\n\n    if (esdtMetadata) {\n      return esdtMetadata;\n    }\n\n    const nftMetadata = this.getNftTransferMetadata(metadata);\n\n    if (nftMetadata) {\n      return nftMetadata;\n    }\n\n    const multiMetadata = this.getMultiTransferMetadata(metadata);\n\n    if (multiMetadata) {\n      return multiMetadata;\n    }\n\n    return metadata;\n  }\n\n  getNormalTransactionMetadata(transaction) {\n    const metadata = new TransactionMetadata();\n    metadata.sender = transaction.sender;\n    metadata.receiver = transaction.receiver;\n    metadata.value = BigInt(transaction.value);\n\n    if (transaction.data) {\n      const decodedData = this.base64Decode(transaction.data);\n      const dataComponents = decodedData.split('@');\n      const args = dataComponents.slice(1);\n\n      if (args.every(x => this.isSmartContractArgument(x))) {\n        metadata.functionName = dataComponents[0];\n        metadata.functionArgs = args;\n      }\n\n      if (metadata.functionName === 'relayedTx' && metadata.functionArgs.length === 1) {\n        try {\n          const relayedTransaction = JSON.parse(this.hexToString(metadata.functionArgs[0]));\n          relayedTransaction.value = relayedTransaction.value.toString();\n          relayedTransaction.sender = this.bech32Encode(this.base64ToHex(relayedTransaction.sender));\n          relayedTransaction.receiver = this.bech32Encode(this.base64ToHex(relayedTransaction.receiver));\n          return this.getNormalTransactionMetadata(relayedTransaction);\n        } catch (error) {// nothing special\n        }\n      }\n\n      if (metadata.functionName === 'relayedTxV2' && metadata.functionArgs.length === 4) {\n        try {\n          const relayedTransaction = new TransactionToDecode();\n          relayedTransaction.sender = transaction.receiver;\n          relayedTransaction.receiver = this.bech32Encode(metadata.functionArgs[0]);\n          relayedTransaction.data = this.base64Encode(this.hexToString(metadata.functionArgs[2]));\n          relayedTransaction.value = '0';\n          return this.getNormalTransactionMetadata(relayedTransaction);\n        } catch (error) {// nothing special\n        }\n      }\n    }\n\n    try {\n      if (transaction.type === \"SmartContractResult\") {\n        if (metadata.functionName === 'MultiESDTNFTTransfer' && metadata.functionArgs.length > 0 && this.bech32Encode(metadata.functionArgs[0]) === metadata.receiver) {\n          metadata.receiver = metadata.sender;\n        }\n\n        if (metadata.functionName === 'ESDTNFTTransfer' && metadata.functionArgs.length > 3 && this.bech32Encode(metadata.functionArgs[3]) === metadata.receiver) {\n          metadata.receiver = metadata.sender;\n        }\n      }\n    } catch (error) {// nothing special\n    }\n\n    return metadata;\n  }\n\n  getMultiTransferMetadata(metadata) {\n    if (metadata.sender !== metadata.receiver) {\n      return undefined;\n    }\n\n    if (metadata.functionName !== 'MultiESDTNFTTransfer') {\n      return undefined;\n    }\n\n    const args = metadata.functionArgs;\n\n    if (args.length < 3) {\n      return undefined;\n    }\n\n    if (!this.isAddressValid(args[0])) {\n      return undefined;\n    }\n\n    const receiver = this.bech32Encode(args[0]);\n    const transferCount = this.hexToNumber(args[1]);\n    const result = new TransactionMetadata();\n\n    if (!result.transfers) {\n      result.transfers = [];\n    }\n\n    let index = 2;\n\n    for (let i = 0; i < transferCount; i++) {\n      const identifier = this.hexToString(args[index++]);\n      const nonce = args[index++];\n      const value = this.hexToBigInt(args[index++]);\n\n      if (nonce) {\n        result.transfers.push({\n          value,\n          properties: {\n            collection: identifier,\n            identifier: `${identifier}-${nonce}`\n          }\n        });\n      } else {\n        result.transfers.push({\n          value,\n          properties: {\n            token: identifier\n          }\n        });\n      }\n    }\n\n    result.sender = metadata.sender;\n    result.receiver = receiver;\n\n    if (args.length > index) {\n      result.functionName = this.hexToString(args[index++]);\n      result.functionArgs = args.slice(index++);\n    }\n\n    return result;\n  }\n\n  getNftTransferMetadata(metadata) {\n    if (metadata.sender !== metadata.receiver) {\n      return undefined;\n    }\n\n    if (metadata.functionName !== 'ESDTNFTTransfer') {\n      return undefined;\n    }\n\n    const args = metadata.functionArgs;\n\n    if (args.length < 4) {\n      return undefined;\n    }\n\n    if (!this.isAddressValid(args[3])) {\n      return undefined;\n    }\n\n    const collectionIdentifier = this.hexToString(args[0]);\n    const nonce = args[1];\n    const value = this.hexToBigInt(args[2]);\n    const receiver = this.bech32Encode(args[3]);\n    const result = new TransactionMetadata();\n    result.sender = metadata.sender;\n    result.receiver = receiver;\n    result.value = value;\n\n    if (args.length > 4) {\n      result.functionName = this.hexToString(args[4]);\n      result.functionArgs = args.slice(5);\n    }\n\n    result.transfers = [{\n      value,\n      properties: {\n        collection: collectionIdentifier,\n        identifier: `${collectionIdentifier}-${nonce}`\n      }\n    }];\n    return result;\n  }\n\n  base64Encode(str) {\n    return Buffer.from(str).toString('base64');\n  }\n\n  base64Decode(str) {\n    return Buffer.from(str, 'base64').toString('binary');\n  }\n\n  hexToNumber(hex) {\n    return parseInt(hex, 16);\n  }\n\n  getEsdtTransactionMetadata(metadata) {\n    if (metadata.functionName !== 'ESDTTransfer') {\n      return undefined;\n    }\n\n    const args = metadata.functionArgs;\n\n    if (args.length < 2) {\n      return undefined;\n    }\n\n    const tokenIdentifier = this.hexToString(args[0]);\n    const value = this.hexToBigInt(args[1]);\n    const result = new TransactionMetadata();\n    result.sender = metadata.sender;\n    result.receiver = metadata.receiver;\n\n    if (args.length > 2) {\n      result.functionName = this.hexToString(args[2]);\n      result.functionArgs = args.slice(3);\n    }\n\n    result.transfers = [{\n      value,\n      properties: {\n        identifier: tokenIdentifier\n      }\n    }];\n    result.value = metadata.value;\n    return result;\n  }\n\n  bech32Encode(address) {\n    const pubKey = Buffer.from(address, \"hex\");\n    let words = bech32_1.bech32.toWords(pubKey);\n    return bech32_1.bech32.encode('erd', words);\n  }\n\n  isAddressValid(address) {\n    return Buffer.from(address, \"hex\").length == 32;\n  }\n\n  isSmartContractArgument(arg) {\n    if (!this.isHex(arg)) {\n      return false;\n    }\n\n    if (arg.length % 2 !== 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isHex(value) {\n    return new RegExp(/[^a-f0-9]/gi).test(value) === false;\n  }\n\n  base64ToHex(str) {\n    return Buffer.from(str, 'base64').toString('hex');\n  }\n\n  hexToString(hex) {\n    return Buffer.from(hex, 'hex').toString('ascii');\n  }\n\n  hexToBigInt(hex) {\n    if (!hex) {\n      return BigInt(0);\n    }\n\n    return BigInt('0x' + hex);\n  }\n\n}\n\nexports.TransactionDecoder = TransactionDecoder;\n\nclass TransactionToDecode {\n  constructor() {\n    this.sender = '';\n    this.receiver = '';\n    this.data = '';\n    this.value = '0';\n    this.type = '';\n  }\n\n}\n\nexports.TransactionToDecode = TransactionToDecode;\n\nclass TransactionMetadata {\n  constructor() {\n    this.sender = '';\n    this.receiver = '';\n    this.value = BigInt(0);\n    this.functionArgs = [];\n  }\n\n}\n\nexports.TransactionMetadata = TransactionMetadata;\n\nclass TransactionMetadataTransfer {\n  constructor() {\n    this.value = BigInt(0);\n  }\n\n}\n\nexports.TransactionMetadataTransfer = TransactionMetadataTransfer;\n\nclass TokenTransferProperties {}\n\nexports.TokenTransferProperties = TokenTransferProperties;","map":{"version":3,"names":["Object","defineProperty","exports","value","TokenTransferProperties","TransactionMetadataTransfer","TransactionMetadata","TransactionToDecode","TransactionDecoder","bech32_1","require","getTransactionMetadata","transaction","metadata","getNormalTransactionMetadata","esdtMetadata","getEsdtTransactionMetadata","nftMetadata","getNftTransferMetadata","multiMetadata","getMultiTransferMetadata","sender","receiver","BigInt","data","decodedData","base64Decode","dataComponents","split","args","slice","every","x","isSmartContractArgument","functionName","functionArgs","length","relayedTransaction","JSON","parse","hexToString","toString","bech32Encode","base64ToHex","error","base64Encode","type","undefined","isAddressValid","transferCount","hexToNumber","result","transfers","index","i","identifier","nonce","hexToBigInt","push","properties","collection","token","collectionIdentifier","str","Buffer","from","hex","parseInt","tokenIdentifier","address","pubKey","words","bech32","toWords","encode","arg","isHex","RegExp","test","constructor"],"sources":["/home/edi/Desktop/swap/client/node_modules/@elrondnetwork/transaction-decoder/lib/transaction.decoder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenTransferProperties = exports.TransactionMetadataTransfer = exports.TransactionMetadata = exports.TransactionToDecode = exports.TransactionDecoder = void 0;\nconst bech32_1 = require(\"bech32\");\nclass TransactionDecoder {\n    getTransactionMetadata(transaction) {\n        const metadata = this.getNormalTransactionMetadata(transaction);\n        const esdtMetadata = this.getEsdtTransactionMetadata(metadata);\n        if (esdtMetadata) {\n            return esdtMetadata;\n        }\n        const nftMetadata = this.getNftTransferMetadata(metadata);\n        if (nftMetadata) {\n            return nftMetadata;\n        }\n        const multiMetadata = this.getMultiTransferMetadata(metadata);\n        if (multiMetadata) {\n            return multiMetadata;\n        }\n        return metadata;\n    }\n    getNormalTransactionMetadata(transaction) {\n        const metadata = new TransactionMetadata();\n        metadata.sender = transaction.sender;\n        metadata.receiver = transaction.receiver;\n        metadata.value = BigInt(transaction.value);\n        if (transaction.data) {\n            const decodedData = this.base64Decode(transaction.data);\n            const dataComponents = decodedData.split('@');\n            const args = dataComponents.slice(1);\n            if (args.every((x) => this.isSmartContractArgument(x))) {\n                metadata.functionName = dataComponents[0];\n                metadata.functionArgs = args;\n            }\n            if (metadata.functionName === 'relayedTx' && metadata.functionArgs.length === 1) {\n                try {\n                    const relayedTransaction = JSON.parse(this.hexToString(metadata.functionArgs[0]));\n                    relayedTransaction.value = relayedTransaction.value.toString();\n                    relayedTransaction.sender = this.bech32Encode(this.base64ToHex(relayedTransaction.sender));\n                    relayedTransaction.receiver = this.bech32Encode(this.base64ToHex(relayedTransaction.receiver));\n                    return this.getNormalTransactionMetadata(relayedTransaction);\n                }\n                catch (error) {\n                    // nothing special\n                }\n            }\n            if (metadata.functionName === 'relayedTxV2' && metadata.functionArgs.length === 4) {\n                try {\n                    const relayedTransaction = new TransactionToDecode();\n                    relayedTransaction.sender = transaction.receiver;\n                    relayedTransaction.receiver = this.bech32Encode(metadata.functionArgs[0]);\n                    relayedTransaction.data = this.base64Encode(this.hexToString(metadata.functionArgs[2]));\n                    relayedTransaction.value = '0';\n                    return this.getNormalTransactionMetadata(relayedTransaction);\n                }\n                catch (error) {\n                    // nothing special\n                }\n            }\n        }\n        try {\n            if (transaction.type === \"SmartContractResult\") {\n                if (metadata.functionName === 'MultiESDTNFTTransfer' &&\n                    metadata.functionArgs.length > 0 &&\n                    this.bech32Encode(metadata.functionArgs[0]) === metadata.receiver) {\n                    metadata.receiver = metadata.sender;\n                }\n                if (metadata.functionName === 'ESDTNFTTransfer' &&\n                    metadata.functionArgs.length > 3 &&\n                    this.bech32Encode(metadata.functionArgs[3]) === metadata.receiver) {\n                    metadata.receiver = metadata.sender;\n                }\n            }\n        }\n        catch (error) {\n            // nothing special\n        }\n        return metadata;\n    }\n    getMultiTransferMetadata(metadata) {\n        if (metadata.sender !== metadata.receiver) {\n            return undefined;\n        }\n        if (metadata.functionName !== 'MultiESDTNFTTransfer') {\n            return undefined;\n        }\n        const args = metadata.functionArgs;\n        if (args.length < 3) {\n            return undefined;\n        }\n        if (!this.isAddressValid(args[0])) {\n            return undefined;\n        }\n        const receiver = this.bech32Encode(args[0]);\n        const transferCount = this.hexToNumber(args[1]);\n        const result = new TransactionMetadata();\n        if (!result.transfers) {\n            result.transfers = [];\n        }\n        let index = 2;\n        for (let i = 0; i < transferCount; i++) {\n            const identifier = this.hexToString(args[index++]);\n            const nonce = args[index++];\n            const value = this.hexToBigInt(args[index++]);\n            if (nonce) {\n                result.transfers.push({\n                    value,\n                    properties: {\n                        collection: identifier,\n                        identifier: `${identifier}-${nonce}`,\n                    },\n                });\n            }\n            else {\n                result.transfers.push({\n                    value,\n                    properties: {\n                        token: identifier\n                    },\n                });\n            }\n        }\n        result.sender = metadata.sender;\n        result.receiver = receiver;\n        if (args.length > index) {\n            result.functionName = this.hexToString(args[index++]);\n            result.functionArgs = args.slice(index++);\n        }\n        return result;\n    }\n    getNftTransferMetadata(metadata) {\n        if (metadata.sender !== metadata.receiver) {\n            return undefined;\n        }\n        if (metadata.functionName !== 'ESDTNFTTransfer') {\n            return undefined;\n        }\n        const args = metadata.functionArgs;\n        if (args.length < 4) {\n            return undefined;\n        }\n        if (!this.isAddressValid(args[3])) {\n            return undefined;\n        }\n        const collectionIdentifier = this.hexToString(args[0]);\n        const nonce = args[1];\n        const value = this.hexToBigInt(args[2]);\n        const receiver = this.bech32Encode(args[3]);\n        const result = new TransactionMetadata();\n        result.sender = metadata.sender;\n        result.receiver = receiver;\n        result.value = value;\n        if (args.length > 4) {\n            result.functionName = this.hexToString(args[4]);\n            result.functionArgs = args.slice(5);\n        }\n        result.transfers = [{\n                value,\n                properties: {\n                    collection: collectionIdentifier,\n                    identifier: `${collectionIdentifier}-${nonce}`\n                },\n            }];\n        return result;\n    }\n    base64Encode(str) {\n        return Buffer.from(str).toString('base64');\n    }\n    base64Decode(str) {\n        return Buffer.from(str, 'base64').toString('binary');\n    }\n    hexToNumber(hex) {\n        return parseInt(hex, 16);\n    }\n    getEsdtTransactionMetadata(metadata) {\n        if (metadata.functionName !== 'ESDTTransfer') {\n            return undefined;\n        }\n        const args = metadata.functionArgs;\n        if (args.length < 2) {\n            return undefined;\n        }\n        const tokenIdentifier = this.hexToString(args[0]);\n        const value = this.hexToBigInt(args[1]);\n        const result = new TransactionMetadata();\n        result.sender = metadata.sender;\n        result.receiver = metadata.receiver;\n        if (args.length > 2) {\n            result.functionName = this.hexToString(args[2]);\n            result.functionArgs = args.slice(3);\n        }\n        result.transfers = [{\n                value,\n                properties: {\n                    identifier: tokenIdentifier\n                },\n            }];\n        result.value = metadata.value;\n        return result;\n    }\n    bech32Encode(address) {\n        const pubKey = Buffer.from(address, \"hex\");\n        let words = bech32_1.bech32.toWords(pubKey);\n        return bech32_1.bech32.encode('erd', words);\n    }\n    isAddressValid(address) {\n        return Buffer.from(address, \"hex\").length == 32;\n    }\n    isSmartContractArgument(arg) {\n        if (!this.isHex(arg)) {\n            return false;\n        }\n        if (arg.length % 2 !== 0) {\n            return false;\n        }\n        return true;\n    }\n    isHex(value) {\n        return new RegExp(/[^a-f0-9]/gi).test(value) === false;\n    }\n    base64ToHex(str) {\n        return Buffer.from(str, 'base64').toString('hex');\n    }\n    hexToString(hex) {\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n    hexToBigInt(hex) {\n        if (!hex) {\n            return BigInt(0);\n        }\n        return BigInt('0x' + hex);\n    }\n}\nexports.TransactionDecoder = TransactionDecoder;\nclass TransactionToDecode {\n    constructor() {\n        this.sender = '';\n        this.receiver = '';\n        this.data = '';\n        this.value = '0';\n        this.type = '';\n    }\n}\nexports.TransactionToDecode = TransactionToDecode;\nclass TransactionMetadata {\n    constructor() {\n        this.sender = '';\n        this.receiver = '';\n        this.value = BigInt(0);\n        this.functionArgs = [];\n    }\n}\nexports.TransactionMetadata = TransactionMetadata;\nclass TransactionMetadataTransfer {\n    constructor() {\n        this.value = BigInt(0);\n    }\n}\nexports.TransactionMetadataTransfer = TransactionMetadataTransfer;\nclass TokenTransferProperties {\n}\nexports.TokenTransferProperties = TokenTransferProperties;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}