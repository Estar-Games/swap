{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnumValue = exports.EnumVariantDefinition = exports.EnumType = void 0;\n\nconst errors_1 = require(\"../../errors\");\n\nconst utils_1 = require(\"../../utils\");\n\nconst fields_1 = require(\"./fields\");\n\nconst types_1 = require(\"./types\");\n\nconst SimpleEnumMaxDiscriminant = 256;\n\nclass EnumType extends types_1.CustomType {\n  constructor(name, variants) {\n    super(name);\n    this.variants = [];\n    this.variants = variants;\n  }\n\n  getClassName() {\n    return EnumType.ClassName;\n  }\n\n  static fromJSON(json) {\n    let variants = (json.variants || []).map(variant => EnumVariantDefinition.fromJSON(variant));\n    return new EnumType(json.name, variants);\n  }\n\n  getVariantByDiscriminant(discriminant) {\n    let result = this.variants.find(e => e.discriminant == discriminant);\n    utils_1.guardValueIsSet(`variant by discriminant (${discriminant})`, result);\n    return result;\n  }\n\n  getVariantByName(name) {\n    let result = this.variants.find(e => e.name == name);\n    utils_1.guardValueIsSet(`variant by name (${name})`, result);\n    return result;\n  }\n\n  getNamesOfDependencies() {\n    const dependencies = [];\n\n    for (const variant of this.variants) {\n      dependencies.push(...variant.getNamesOfDependencies());\n    }\n\n    return [...new Set(dependencies)];\n  }\n\n}\n\nexports.EnumType = EnumType;\nEnumType.ClassName = \"EnumType\";\n\nclass EnumVariantDefinition {\n  constructor(name, discriminant) {\n    let fieldsDefinitions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    this.fieldsDefinitions = [];\n    utils_1.guardTrue(discriminant < SimpleEnumMaxDiscriminant, `discriminant for simple enum should be less than ${SimpleEnumMaxDiscriminant}`);\n    this.name = name;\n    this.discriminant = discriminant;\n    this.fieldsDefinitions = fieldsDefinitions;\n  }\n\n  static fromJSON(json) {\n    let definitions = (json.fields || []).map(definition => fields_1.FieldDefinition.fromJSON(definition));\n    return new EnumVariantDefinition(json.name, json.discriminant, definitions);\n  }\n\n  getFieldsDefinitions() {\n    return this.fieldsDefinitions;\n  }\n\n  getFieldDefinition(name) {\n    return this.fieldsDefinitions.find(item => item.name == name);\n  }\n\n  getNamesOfDependencies() {\n    return fields_1.Fields.getNamesOfTypeDependencies(this.fieldsDefinitions);\n  }\n\n}\n\nexports.EnumVariantDefinition = EnumVariantDefinition;\n\nclass EnumValue extends types_1.TypedValue {\n  constructor(type, variant, fields) {\n    super(type);\n    this.fields = [];\n    this.name = variant.name;\n    this.discriminant = variant.discriminant;\n    this.fields = fields;\n    this.fieldsByName = new Map(fields.map(field => [field.name, field]));\n    let definitions = variant.getFieldsDefinitions();\n    fields_1.Fields.checkTyping(this.fields, definitions);\n  }\n\n  getClassName() {\n    return EnumValue.ClassName;\n  }\n  /**\n   * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n   */\n\n\n  static fromName(type, name) {\n    let variant = type.getVariantByName(name);\n    return new EnumValue(type, variant, []);\n  }\n  /**\n   * Utility (named constructor) to create a simple (i.e. without fields) enum value.\n   */\n\n\n  static fromDiscriminant(type, discriminant) {\n    let variant = type.getVariantByDiscriminant(discriminant);\n    return new EnumValue(type, variant, []);\n  }\n\n  equals(other) {\n    if (!this.getType().equals(other.getType())) {\n      return false;\n    }\n\n    let selfFields = this.getFields();\n    let otherFields = other.getFields();\n    const nameIsSame = this.name == other.name;\n    const discriminantIsSame = this.discriminant == other.discriminant;\n    const fieldsAreSame = fields_1.Fields.equals(selfFields, otherFields);\n    return nameIsSame && discriminantIsSame && fieldsAreSame;\n  }\n\n  getFields() {\n    return this.fields;\n  }\n\n  getFieldValue(name) {\n    let field = this.fieldsByName.get(name);\n\n    if (field) {\n      return field.value.valueOf();\n    }\n\n    throw new errors_1.ErrMissingFieldOnEnum(name, this.getType().getName());\n  }\n\n  valueOf() {\n    let result = {\n      name: this.name,\n      fields: []\n    };\n    this.fields.forEach(field => result.fields[field.name] = field.value.valueOf());\n    return result;\n  }\n\n}\n\nexports.EnumValue = EnumValue;\nEnumValue.ClassName = \"EnumValue\";","map":{"version":3,"mappings":"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","names":["SimpleEnumMaxDiscriminant","EnumType","types_1","constructor","name","variants","getClassName","ClassName","fromJSON","json","map","variant","EnumVariantDefinition","getVariantByDiscriminant","discriminant","result","find","e","utils_1","getVariantByName","getNamesOfDependencies","dependencies","push","Set","exports","fieldsDefinitions","definitions","fields","definition","fields_1","getFieldsDefinitions","getFieldDefinition","item","getNamesOfTypeDependencies","EnumValue","type","fieldsByName","Map","field","checkTyping","fromName","fromDiscriminant","equals","other","getType","selfFields","getFields","otherFields","nameIsSame","discriminantIsSame","fieldsAreSame","getFieldValue","get","value","valueOf","errors_1","getName","forEach"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/enum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}