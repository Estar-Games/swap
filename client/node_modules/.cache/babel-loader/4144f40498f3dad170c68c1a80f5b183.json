{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionHash = exports.Transaction = void 0;\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nconst address_1 = require(\"./address\");\n\nconst networkParams_1 = require(\"./networkParams\");\n\nconst signature_1 = require(\"./signature\");\n\nconst utils_1 = require(\"./utils\");\n\nconst transactionPayload_1 = require(\"./transactionPayload\");\n\nconst errors = __importStar(require(\"./errors\"));\n\nconst proto_1 = require(\"./proto\");\n\nconst hash_1 = require(\"./hash\");\n\nconst constants_1 = require(\"./constants\");\n\nconst createTransactionHasher = require(\"blake2b\");\n\nconst TRANSACTION_HASH_LENGTH = 32;\n/**\n * An abstraction for creating, signing and broadcasting Elrond transactions.\n */\n\nclass Transaction {\n  /**\n   * Creates a new Transaction object.\n   */\n  constructor(_ref) {\n    let {\n      nonce,\n      value,\n      receiver,\n      sender,\n      gasPrice,\n      gasLimit,\n      data,\n      chainID,\n      version,\n      options\n    } = _ref;\n    this.nonce = nonce || 0;\n    this.value = value || 0;\n    this.sender = sender || address_1.Address.Zero();\n    this.receiver = receiver;\n    this.gasPrice = gasPrice || constants_1.TRANSACTION_MIN_GAS_PRICE;\n    this.gasLimit = gasLimit;\n    this.data = data || new transactionPayload_1.TransactionPayload();\n    this.chainID = chainID;\n    this.version = version || networkParams_1.TransactionVersion.withDefaultVersion();\n    this.options = options || networkParams_1.TransactionOptions.withDefaultOptions();\n    this.signature = signature_1.Signature.empty();\n    this.hash = TransactionHash.empty();\n  }\n\n  getNonce() {\n    return this.nonce;\n  }\n  /**\n   * Sets the account sequence number of the sender. Must be done prior signing.\n   */\n\n\n  setNonce(nonce) {\n    this.nonce = nonce;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  setValue(value) {\n    this.value = value;\n  }\n\n  getSender() {\n    return this.sender;\n  }\n\n  getReceiver() {\n    return this.receiver;\n  }\n\n  getGasPrice() {\n    return this.gasPrice;\n  }\n\n  setGasPrice(gasPrice) {\n    this.gasPrice = gasPrice;\n  }\n\n  getGasLimit() {\n    return this.gasLimit;\n  }\n\n  setGasLimit(gasLimit) {\n    this.gasLimit = gasLimit;\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  getChainID() {\n    return this.chainID;\n  }\n\n  setChainID(chainID) {\n    this.chainID = chainID;\n  }\n\n  getVersion() {\n    return this.version;\n  }\n\n  getOptions() {\n    return this.options;\n  }\n\n  getSignature() {\n    return this.signature;\n  }\n\n  getHash() {\n    utils_1.guardNotEmpty(this.hash, \"hash\");\n    return this.hash;\n  }\n  /**\n   * Serializes a transaction to a sequence of bytes, ready to be signed.\n   * This function is called internally by signers.\n   *\n   * @param signedBy The address of the future signer\n   */\n\n\n  serializeForSigning(signedBy) {\n    // TODO: for appropriate tx.version, interpret tx.options accordingly and sign using the content / data hash\n    let plain = this.toPlainObject(signedBy); // Make sure we never sign the transaction with another signature set up (useful when using the same method for verification)\n\n    if (plain.signature) {\n      delete plain.signature;\n    }\n\n    let serialized = JSON.stringify(plain);\n    return Buffer.from(serialized);\n  }\n  /**\n   * Converts the transaction object into a ready-to-serialize, plain JavaScript object.\n   * This function is called internally within the signing procedure.\n   *\n   * @param sender The address of the sender (will be provided when called within the signing procedure)\n   */\n\n\n  toPlainObject(sender) {\n    return {\n      nonce: this.nonce.valueOf(),\n      value: this.value.toString(),\n      receiver: this.receiver.bech32(),\n      sender: sender ? sender.bech32() : this.sender.bech32(),\n      gasPrice: this.gasPrice.valueOf(),\n      gasLimit: this.gasLimit.valueOf(),\n      data: this.data.length() == 0 ? undefined : this.data.encoded(),\n      chainID: this.chainID.valueOf(),\n      version: this.version.valueOf(),\n      options: this.options.valueOf() == 0 ? undefined : this.options.valueOf(),\n      signature: this.signature.hex() ? this.signature.hex() : undefined\n    };\n  }\n  /**\n   * Converts a plain object transaction into a Transaction Object.\n   *\n   * @param plainObjectTransaction Raw data of a transaction, usually obtained by calling toPlainObject()\n   */\n\n\n  static fromPlainObject(plainObjectTransaction) {\n    const tx = new Transaction({\n      nonce: Number(plainObjectTransaction.nonce),\n      value: new bignumber_js_1.BigNumber(plainObjectTransaction.value),\n      receiver: address_1.Address.fromString(plainObjectTransaction.receiver),\n      gasPrice: Number(plainObjectTransaction.gasPrice),\n      gasLimit: Number(plainObjectTransaction.gasLimit),\n      data: new transactionPayload_1.TransactionPayload(atob(plainObjectTransaction.data || \"\")),\n      chainID: String(plainObjectTransaction.chainID),\n      version: new networkParams_1.TransactionVersion(plainObjectTransaction.version)\n    });\n\n    if (plainObjectTransaction.signature) {\n      tx.applySignature(new signature_1.Signature(plainObjectTransaction.signature), address_1.Address.fromString(plainObjectTransaction.sender));\n    }\n\n    return tx;\n  }\n  /**\n   * Applies the signature on the transaction.\n   *\n   * @param signature The signature, as computed by a signer.\n   * @param signedBy The address of the signer.\n   */\n\n\n  applySignature(signature, signedBy) {\n    this.signature = signature;\n    this.sender = signedBy;\n    this.hash = TransactionHash.compute(this);\n  }\n  /**\n   * Converts a transaction to a ready-to-broadcast object.\n   * Called internally by the network provider.\n   */\n\n\n  toSendable() {\n    return this.toPlainObject();\n  }\n  /**\n   * Computes the current transaction fee based on the {@link NetworkConfig} and transaction properties\n   * @param networkConfig {@link NetworkConfig}\n   */\n\n\n  computeFee(networkConfig) {\n    let moveBalanceGas = networkConfig.MinGasLimit.valueOf() + this.data.length() * networkConfig.GasPerDataByte.valueOf();\n\n    if (moveBalanceGas > this.gasLimit.valueOf()) {\n      throw new errors.ErrNotEnoughGas(this.gasLimit.valueOf());\n    }\n\n    let gasPrice = new bignumber_js_1.BigNumber(this.gasPrice.valueOf());\n    let feeForMove = new bignumber_js_1.BigNumber(moveBalanceGas).multipliedBy(gasPrice);\n\n    if (moveBalanceGas === this.gasLimit.valueOf()) {\n      return feeForMove;\n    }\n\n    let diff = new bignumber_js_1.BigNumber(this.gasLimit.valueOf() - moveBalanceGas);\n    let modifiedGasPrice = gasPrice.multipliedBy(new bignumber_js_1.BigNumber(networkConfig.GasPriceModifier.valueOf()));\n    let processingFee = diff.multipliedBy(modifiedGasPrice);\n    return feeForMove.plus(processingFee);\n  }\n\n}\n\nexports.Transaction = Transaction;\n/**\n * An abstraction for handling and computing transaction hashes.\n */\n\nclass TransactionHash extends hash_1.Hash {\n  constructor(hash) {\n    super(hash);\n  }\n  /**\n   * Computes the hash of a transaction.\n   */\n\n\n  static compute(transaction) {\n    let serializer = new proto_1.ProtoSerializer();\n    let buffer = serializer.serializeTransaction(transaction);\n    let hash = createTransactionHasher(TRANSACTION_HASH_LENGTH).update(buffer).digest(\"hex\");\n    return new TransactionHash(hash);\n  }\n\n}\n\nexports.TransactionHash = TransactionHash;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA,MAAMA,uBAAuB,GAAGC,OAAO,CAAC,SAAD,CAAvC;;AACA,MAAMC,uBAAuB,GAAG,EAAhC;AAEA;;;;AAGA,MAAaC,WAAb,CAAwB;EA6DtB;;;EAGAC,kBAsBC;IAAA,IAtBkB;MACjBC,KADiB;MAEjBC,KAFiB;MAGjBC,QAHiB;MAIjBC,MAJiB;MAKjBC,QALiB;MAMjBC,QANiB;MAOjBC,IAPiB;MAQjBC,OARiB;MASjBC,OATiB;MAUjBC;IAViB,CAsBlB;IACC,KAAKT,KAAL,GAAaA,KAAK,IAAI,CAAtB;IACA,KAAKC,KAAL,GAAaA,KAAK,IAAI,CAAtB;IACA,KAAKE,MAAL,GAAcA,MAAM,IAAIO,kBAAQC,IAAR,EAAxB;IACA,KAAKT,QAAL,GAAgBA,QAAhB;IACA,KAAKE,QAAL,GAAgBA,QAAQ,IAAIQ,qCAA5B;IACA,KAAKP,QAAL,GAAgBA,QAAhB;IACA,KAAKC,IAAL,GAAYA,IAAI,IAAI,IAAIO,uCAAJ,EAApB;IACA,KAAKN,OAAL,GAAeA,OAAf;IACA,KAAKC,OAAL,GAAeA,OAAO,IAAIM,mCAAmBC,kBAAnB,EAA1B;IACA,KAAKN,OAAL,GAAeA,OAAO,IAAIK,mCAAmBE,kBAAnB,EAA1B;IAEA,KAAKC,SAAL,GAAiBC,sBAAUC,KAAV,EAAjB;IACA,KAAKC,IAAL,GAAYC,eAAe,CAACF,KAAhB,EAAZ;EACD;;EAEDG,QAAQ;IACN,OAAO,KAAKtB,KAAZ;EACD;EAED;;;;;EAGAuB,QAAQ,CAACvB,KAAD,EAAc;IACpB,KAAKA,KAAL,GAAaA,KAAb;EACD;;EAEDwB,QAAQ;IACN,OAAO,KAAKvB,KAAZ;EACD;;EAEDwB,QAAQ,CAACxB,KAAD,EAAyB;IAC/B,KAAKA,KAAL,GAAaA,KAAb;EACD;;EAEDyB,SAAS;IACP,OAAO,KAAKvB,MAAZ;EACD;;EAEDwB,WAAW;IACT,OAAO,KAAKzB,QAAZ;EACD;;EAED0B,WAAW;IACT,OAAO,KAAKxB,QAAZ;EACD;;EAEDyB,WAAW,CAACzB,QAAD,EAAoB;IAC7B,KAAKA,QAAL,GAAgBA,QAAhB;EACD;;EAED0B,WAAW;IACT,OAAO,KAAKzB,QAAZ;EACD;;EAED0B,WAAW,CAAC1B,QAAD,EAAoB;IAC7B,KAAKA,QAAL,GAAgBA,QAAhB;EACD;;EAED2B,OAAO;IACL,OAAO,KAAK1B,IAAZ;EACD;;EAED2B,UAAU;IACR,OAAO,KAAK1B,OAAZ;EACD;;EAED2B,UAAU,CAAC3B,OAAD,EAAkB;IAC1B,KAAKA,OAAL,GAAeA,OAAf;EACD;;EAED4B,UAAU;IACR,OAAO,KAAK3B,OAAZ;EACD;;EAED4B,UAAU;IACR,OAAO,KAAK3B,OAAZ;EACD;;EAED4B,YAAY;IACV,OAAO,KAAKpB,SAAZ;EACD;;EAEDqB,OAAO;IACLC,sBAAc,KAAKnB,IAAnB,EAAyB,MAAzB;IACA,OAAO,KAAKA,IAAZ;EACD;EAED;;;;;;;;EAMAoB,mBAAmB,CAACC,QAAD,EAAmB;IACpC;IACA,IAAIC,KAAK,GAAG,KAAKC,aAAL,CAAmBF,QAAnB,CAAZ,CAFoC,CAGpC;;IACA,IAAIC,KAAK,CAACzB,SAAV,EAAqB;MACnB,OAAOyB,KAAK,CAACzB,SAAb;IACD;;IACD,IAAI2B,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAjB;IAEA,OAAOK,MAAM,CAACC,IAAP,CAAYJ,UAAZ,CAAP;EACD;EAED;;;;;;;;EAMAD,aAAa,CAACxC,MAAD,EAAkB;IAC7B,OAAO;MACLH,KAAK,EAAE,KAAKA,KAAL,CAAWiD,OAAX,EADF;MAELhD,KAAK,EAAE,KAAKA,KAAL,CAAWiD,QAAX,EAFF;MAGLhD,QAAQ,EAAE,KAAKA,QAAL,CAAciD,MAAd,EAHL;MAILhD,MAAM,EAAEA,MAAM,GAAGA,MAAM,CAACgD,MAAP,EAAH,GAAqB,KAAKhD,MAAL,CAAYgD,MAAZ,EAJ9B;MAKL/C,QAAQ,EAAE,KAAKA,QAAL,CAAc6C,OAAd,EALL;MAML5C,QAAQ,EAAE,KAAKA,QAAL,CAAc4C,OAAd,EANL;MAOL3C,IAAI,EAAE,KAAKA,IAAL,CAAU8C,MAAV,MAAsB,CAAtB,GAA0BC,SAA1B,GAAsC,KAAK/C,IAAL,CAAUgD,OAAV,EAPvC;MAQL/C,OAAO,EAAE,KAAKA,OAAL,CAAa0C,OAAb,EARJ;MASLzC,OAAO,EAAE,KAAKA,OAAL,CAAayC,OAAb,EATJ;MAULxC,OAAO,EAAE,KAAKA,OAAL,CAAawC,OAAb,MAA0B,CAA1B,GAA8BI,SAA9B,GAA0C,KAAK5C,OAAL,CAAawC,OAAb,EAV9C;MAWLhC,SAAS,EAAE,KAAKA,SAAL,CAAesC,GAAf,KAAuB,KAAKtC,SAAL,CAAesC,GAAf,EAAvB,GAA8CF;IAXpD,CAAP;EAaD;EAED;;;;;;;EAKsB,OAAfG,eAAe,CAACC,sBAAD,EAAgD;IACpE,MAAMC,EAAE,GAAG,IAAI5D,WAAJ,CAAgB;MACzBE,KAAK,EAAE2D,MAAM,CAACF,sBAAsB,CAACzD,KAAxB,CADY;MAEzBC,KAAK,EAAE,IAAI2D,wBAAJ,CAAcH,sBAAsB,CAACxD,KAArC,CAFkB;MAGzBC,QAAQ,EAAEQ,kBAAQmD,UAAR,CAAmBJ,sBAAsB,CAACvD,QAA1C,CAHe;MAIzBE,QAAQ,EAAEuD,MAAM,CAACF,sBAAsB,CAACrD,QAAxB,CAJS;MAKzBC,QAAQ,EAAEsD,MAAM,CAACF,sBAAsB,CAACpD,QAAxB,CALS;MAMzBC,IAAI,EAAE,IAAIO,uCAAJ,CAAuBiD,IAAI,CAACL,sBAAsB,CAACnD,IAAvB,IAA+B,EAAhC,CAA3B,CANmB;MAOzBC,OAAO,EAAEwD,MAAM,CAACN,sBAAsB,CAAClD,OAAxB,CAPU;MAQzBC,OAAO,EAAE,IAAIM,kCAAJ,CAAuB2C,sBAAsB,CAACjD,OAA9C;IARgB,CAAhB,CAAX;;IAUA,IAAIiD,sBAAsB,CAACxC,SAA3B,EAAsC;MACpCyC,EAAE,CAACM,cAAH,CACE,IAAI9C,qBAAJ,CAAcuC,sBAAsB,CAACxC,SAArC,CADF,EAEEP,kBAAQmD,UAAR,CAAmBJ,sBAAsB,CAACtD,MAA1C,CAFF;IAID;;IAED,OAAOuD,EAAP;EACD;EAED;;;;;;;;EAMAM,cAAc,CAAC/C,SAAD,EAAwBwB,QAAxB,EAA0C;IACtD,KAAKxB,SAAL,GAAiBA,SAAjB;IACA,KAAKd,MAAL,GAAcsC,QAAd;IACA,KAAKrB,IAAL,GAAYC,eAAe,CAAC4C,OAAhB,CAAwB,IAAxB,CAAZ;EACD;EAED;;;;;;EAIAC,UAAU;IACR,OAAO,KAAKvB,aAAL,EAAP;EACD;EAED;;;;;;EAIAwB,UAAU,CAACC,aAAD,EAA8B;IACtC,IAAIC,cAAc,GAChBD,aAAa,CAACE,WAAd,CAA0BrB,OAA1B,KACA,KAAK3C,IAAL,CAAU8C,MAAV,KAAqBgB,aAAa,CAACG,cAAd,CAA6BtB,OAA7B,EAFvB;;IAGA,IAAIoB,cAAc,GAAG,KAAKhE,QAAL,CAAc4C,OAAd,EAArB,EAA8C;MAC5C,MAAM,IAAIuB,MAAM,CAACC,eAAX,CAA2B,KAAKpE,QAAL,CAAc4C,OAAd,EAA3B,CAAN;IACD;;IAED,IAAI7C,QAAQ,GAAG,IAAIwD,wBAAJ,CAAc,KAAKxD,QAAL,CAAc6C,OAAd,EAAd,CAAf;IACA,IAAIyB,UAAU,GAAG,IAAId,wBAAJ,CAAcS,cAAd,EAA8BM,YAA9B,CAA2CvE,QAA3C,CAAjB;;IACA,IAAIiE,cAAc,KAAK,KAAKhE,QAAL,CAAc4C,OAAd,EAAvB,EAAgD;MAC9C,OAAOyB,UAAP;IACD;;IAED,IAAIE,IAAI,GAAG,IAAIhB,wBAAJ,CAAc,KAAKvD,QAAL,CAAc4C,OAAd,KAA0BoB,cAAxC,CAAX;IACA,IAAIQ,gBAAgB,GAAGzE,QAAQ,CAACuE,YAAT,CACrB,IAAIf,wBAAJ,CAAcQ,aAAa,CAACU,gBAAd,CAA+B7B,OAA/B,EAAd,CADqB,CAAvB;IAGA,IAAI8B,aAAa,GAAGH,IAAI,CAACD,YAAL,CAAkBE,gBAAlB,CAApB;IAEA,OAAOH,UAAU,CAACM,IAAX,CAAgBD,aAAhB,CAAP;EACD;;AA7RqB;;AAAxBE;AAgSA;;;;AAGA,MAAa5D,eAAb,SAAqC6D,WAArC,CAAyC;EACvCnF,YAAYqB,IAAZ,EAAwB;IACtB,MAAMA,IAAN;EACD;EAED;;;;;EAGc,OAAP6C,OAAO,CAACkB,WAAD,EAAyB;IACrC,IAAIC,UAAU,GAAG,IAAIC,uBAAJ,EAAjB;IACA,IAAIC,MAAM,GAAGF,UAAU,CAACG,oBAAX,CAAgCJ,WAAhC,CAAb;IACA,IAAI/D,IAAI,GAAGzB,uBAAuB,CAACE,uBAAD,CAAvB,CACR2F,MADQ,CACDF,MADC,EAERG,MAFQ,CAED,KAFC,CAAX;IAGA,OAAO,IAAIpE,eAAJ,CAAoBD,IAApB,CAAP;EACD;;AAfsC;;AAAzC6D","names":["createTransactionHasher","require","TRANSACTION_HASH_LENGTH","Transaction","constructor","nonce","value","receiver","sender","gasPrice","gasLimit","data","chainID","version","options","address_1","Zero","constants_1","transactionPayload_1","networkParams_1","withDefaultVersion","withDefaultOptions","signature","signature_1","empty","hash","TransactionHash","getNonce","setNonce","getValue","setValue","getSender","getReceiver","getGasPrice","setGasPrice","getGasLimit","setGasLimit","getData","getChainID","setChainID","getVersion","getOptions","getSignature","getHash","utils_1","serializeForSigning","signedBy","plain","toPlainObject","serialized","JSON","stringify","Buffer","from","valueOf","toString","bech32","length","undefined","encoded","hex","fromPlainObject","plainObjectTransaction","tx","Number","bignumber_js_1","fromString","atob","String","applySignature","compute","toSendable","computeFee","networkConfig","moveBalanceGas","MinGasLimit","GasPerDataByte","errors","ErrNotEnoughGas","feeForMove","multipliedBy","diff","modifiedGasPrice","GasPriceModifier","processingFee","plus","exports","hash_1","transaction","serializer","proto_1","buffer","serializeTransaction","update","digest"],"sourceRoot":"","sources":["../src/transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}