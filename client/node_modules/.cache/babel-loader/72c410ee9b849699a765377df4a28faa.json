{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Interaction = void 0;\n\nconst query_1 = require(\"./query\");\n\nconst function_1 = require(\"./function\");\n\nconst address_1 = require(\"../address\");\n\nconst typesystem_1 = require(\"./typesystem\");\n\nconst constants_1 = require(\"../constants\");\n\nconst interactionChecker_1 = require(\"./interactionChecker\");\n/**\n * Interactions can be seen as mutable transaction & query builders.\n *\n * Aside from building transactions and queries, the interactors are also responsible for interpreting\n * the execution outcome for the objects they've built.\n */\n\n\nclass Interaction {\n  constructor(contract, func, args) {\n    this.nonce = 0;\n    this.value = \"0\";\n    this.gasLimit = 0;\n    this.gasPrice = undefined;\n    this.chainID = \"\";\n    this.querent = new address_1.Address();\n    this.isWithSingleESDTTransfer = false;\n    this.isWithSingleESDTNFTTransfer = false;\n    this.isWithMultiESDTNFTTransfer = false;\n    this.tokenTransfersSender = new address_1.Address();\n    this.contract = contract;\n    this.function = func;\n    this.args = args;\n    this.tokenTransfers = new TokenTransfersWithinInteraction([], this);\n  }\n\n  getContractAddress() {\n    return this.contract.getAddress();\n  }\n\n  getFunction() {\n    return this.function;\n  }\n\n  getEndpoint() {\n    return this.contract.getEndpoint(this.function);\n  }\n\n  getArguments() {\n    return this.args;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  getTokenTransfers() {\n    return this.tokenTransfers.getTransfers();\n  }\n\n  getGasLimit() {\n    return this.gasLimit;\n  }\n\n  getExplicitReceiver() {\n    return this.explicitReceiver;\n  }\n\n  buildTransaction() {\n    let receiver = this.explicitReceiver || this.contract.getAddress();\n    let func = this.function;\n    let args = this.args;\n\n    if (this.isWithSingleESDTTransfer) {\n      func = new function_1.ContractFunction(constants_1.ESDT_TRANSFER_FUNCTION_NAME);\n      args = this.tokenTransfers.buildArgsForSingleESDTTransfer();\n    } else if (this.isWithSingleESDTNFTTransfer) {\n      // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n      receiver = this.tokenTransfersSender;\n      func = new function_1.ContractFunction(constants_1.ESDTNFT_TRANSFER_FUNCTION_NAME);\n      args = this.tokenTransfers.buildArgsForSingleESDTNFTTransfer();\n    } else if (this.isWithMultiESDTNFTTransfer) {\n      // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.\n      receiver = this.tokenTransfersSender;\n      func = new function_1.ContractFunction(constants_1.MULTI_ESDTNFT_TRANSFER_FUNCTION_NAME);\n      args = this.tokenTransfers.buildArgsForMultiESDTNFTTransfer();\n    }\n\n    let transaction = this.contract.call({\n      func: func,\n      // GasLimit will be set using \"withGasLimit()\".\n      gasLimit: this.gasLimit,\n      gasPrice: this.gasPrice,\n      args: args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      receiver: receiver,\n      chainID: this.chainID\n    });\n    transaction.setNonce(this.nonce);\n    return transaction;\n  }\n\n  buildQuery() {\n    return new query_1.Query({\n      address: this.contract.getAddress(),\n      func: this.function,\n      args: this.args,\n      // Value will be set using \"withValue()\".\n      value: this.value,\n      caller: this.querent\n    });\n  }\n\n  withValue(value) {\n    this.value = value;\n    return this;\n  }\n\n  withSingleESDTTransfer(transfer) {\n    this.isWithSingleESDTTransfer = true;\n    this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n    return this;\n  }\n\n  withSingleESDTNFTTransfer(transfer, sender) {\n    this.isWithSingleESDTNFTTransfer = true;\n    this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);\n    this.tokenTransfersSender = sender;\n    return this;\n  }\n\n  withMultiESDTNFTTransfer(transfers, sender) {\n    this.isWithMultiESDTNFTTransfer = true;\n    this.tokenTransfers = new TokenTransfersWithinInteraction(transfers, this);\n    this.tokenTransfersSender = sender;\n    return this;\n  }\n\n  withGasLimit(gasLimit) {\n    this.gasLimit = gasLimit;\n    return this;\n  }\n\n  withGasPrice(gasPrice) {\n    this.gasPrice = gasPrice;\n    return this;\n  }\n\n  withNonce(nonce) {\n    this.nonce = nonce;\n    return this;\n  }\n\n  useThenIncrementNonceOf(account) {\n    return this.withNonce(account.getNonceThenIncrement());\n  }\n\n  withChainID(chainID) {\n    this.chainID = chainID;\n    return this;\n  }\n  /**\n   * Sets the \"caller\" field on contract queries.\n   */\n\n\n  withQuerent(querent) {\n    this.querent = querent;\n    return this;\n  }\n\n  withExplicitReceiver(receiver) {\n    this.explicitReceiver = receiver;\n    return this;\n  }\n  /**\n   * To perform custom checking, extend {@link Interaction} and override this method.\n   */\n\n\n  check() {\n    new interactionChecker_1.InteractionChecker().checkInteraction(this, this.getEndpoint());\n    return this;\n  }\n\n}\n\nexports.Interaction = Interaction;\n\nclass TokenTransfersWithinInteraction {\n  constructor(transfers, interaction) {\n    this.transfers = transfers;\n    this.interaction = interaction;\n  }\n\n  getTransfers() {\n    return this.transfers;\n  }\n\n  buildArgsForSingleESDTTransfer() {\n    let singleTransfer = this.transfers[0];\n    return [this.getTypedTokenIdentifier(singleTransfer), this.getTypedTokenQuantity(singleTransfer), this.getTypedInteractionFunction(), ...this.getInteractionArguments()];\n  }\n\n  buildArgsForSingleESDTNFTTransfer() {\n    let singleTransfer = this.transfers[0];\n    return [this.getTypedTokenIdentifier(singleTransfer), this.getTypedTokenNonce(singleTransfer), this.getTypedTokenQuantity(singleTransfer), this.getTypedTokensReceiver(), this.getTypedInteractionFunction(), ...this.getInteractionArguments()];\n  }\n\n  buildArgsForMultiESDTNFTTransfer() {\n    let result = [];\n    result.push(this.getTypedTokensReceiver());\n    result.push(this.getTypedNumberOfTransfers());\n\n    for (const transfer of this.transfers) {\n      result.push(this.getTypedTokenIdentifier(transfer));\n      result.push(this.getTypedTokenNonce(transfer));\n      result.push(this.getTypedTokenQuantity(transfer));\n    }\n\n    result.push(this.getTypedInteractionFunction());\n    result.push(...this.getInteractionArguments());\n    return result;\n  }\n\n  getTypedNumberOfTransfers() {\n    return new typesystem_1.U8Value(this.transfers.length);\n  }\n\n  getTypedTokenIdentifier(transfer) {\n    // Important: for NFTs, this has to be the \"collection\" name, actually.\n    // We will reconsider adding the field \"collection\" on \"Token\" upon merging \"ApiProvider\" and \"ProxyProvider\".\n    return typesystem_1.BytesValue.fromUTF8(transfer.tokenIdentifier);\n  }\n\n  getTypedTokenNonce(transfer) {\n    // The token nonce (creation nonce)\n    return new typesystem_1.U64Value(transfer.nonce);\n  }\n\n  getTypedTokenQuantity(transfer) {\n    // For NFTs, this will be 1.\n    return new typesystem_1.BigUIntValue(transfer.amountAsBigInteger);\n  }\n\n  getTypedTokensReceiver() {\n    // The actual receiver of the token(s): the contract\n    return new typesystem_1.AddressValue(this.interaction.getContractAddress());\n  }\n\n  getTypedInteractionFunction() {\n    return typesystem_1.BytesValue.fromUTF8(this.interaction.getFunction().valueOf());\n  }\n\n  getInteractionArguments() {\n    return this.interaction.getArguments();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Interaction","constructor","contract","func","args","undefined","address_1","function","tokenTransfers","TokenTransfersWithinInteraction","getContractAddress","getAddress","getFunction","getEndpoint","getArguments","getValue","value","getTokenTransfers","getTransfers","getGasLimit","gasLimit","getExplicitReceiver","explicitReceiver","buildTransaction","receiver","isWithSingleESDTTransfer","function_1","constants_1","buildArgsForSingleESDTTransfer","isWithSingleESDTNFTTransfer","tokenTransfersSender","buildArgsForSingleESDTNFTTransfer","isWithMultiESDTNFTTransfer","buildArgsForMultiESDTNFTTransfer","transaction","call","gasPrice","chainID","setNonce","nonce","buildQuery","query_1","address","caller","querent","withValue","withSingleESDTTransfer","transfer","withSingleESDTNFTTransfer","sender","withMultiESDTNFTTransfer","transfers","withGasLimit","withGasPrice","withNonce","useThenIncrementNonceOf","account","getNonceThenIncrement","withChainID","withQuerent","withExplicitReceiver","check","interactionChecker_1","checkInteraction","exports","interaction","singleTransfer","getTypedTokenIdentifier","getTypedTokenQuantity","getTypedInteractionFunction","getInteractionArguments","getTypedTokenNonce","getTypedTokensReceiver","result","push","getTypedNumberOfTransfers","typesystem_1","length","fromUTF8","tokenIdentifier","amountAsBigInteger","valueOf"],"sourceRoot":"","sources":["../../src/smartcontracts/interaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}