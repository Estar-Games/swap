{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prependByteToBuffer = exports.flipBufferBitsInPlace = exports.getHexMagnitudeOfBigInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.cloneBuffer = exports.isMsbZero = exports.isMsbOne = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst utils_codec_1 = require(\"../../utils.codec\");\n/**\n * Returns whether the most significant bit of a given byte (within a buffer) is 1.\n * @param buffer the buffer to test\n * @param byteIndex the index of the byte to test\n */\n\n\nfunction isMsbOne(buffer) {\n  let byteIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let byte = buffer[byteIndex];\n  let bit = byte >> 7;\n  let isSet = bit == 1;\n  return isSet;\n}\n\nexports.isMsbOne = isMsbOne;\n/**\n * Returns whether the most significant bit of a given byte (within a buffer) is 0.\n * @param buffer the buffer to test\n * @param byteIndex the index of the byte to test\n */\n\nfunction isMsbZero(buffer) {\n  let byteIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return !isMsbOne(buffer, byteIndex);\n}\n\nexports.isMsbZero = isMsbZero;\n\nfunction cloneBuffer(buffer) {\n  let clone = Buffer.alloc(buffer.length);\n  buffer.copy(clone);\n  return clone;\n}\n\nexports.cloneBuffer = cloneBuffer;\n\nfunction bufferToBigInt(buffer) {\n  // Currently, in JavaScript, this is the feasible way to achieve reliable, arbitrary-size Buffer to BigInt conversion.\n  let hex = buffer.toString(\"hex\");\n  return new bignumber_js_1.default(`0x${hex}`, 16);\n}\n\nexports.bufferToBigInt = bufferToBigInt;\n\nfunction bigIntToBuffer(value) {\n  // Currently, in JavaScript, this is the feasible way to achieve reliable, arbitrary-size BigInt to Buffer conversion.\n  let hex = getHexMagnitudeOfBigInt(value);\n  return Buffer.from(hex, \"hex\");\n}\n\nexports.bigIntToBuffer = bigIntToBuffer;\n\nfunction getHexMagnitudeOfBigInt(value) {\n  if (!value) {\n    return \"\";\n  }\n\n  if (value.isNegative()) {\n    value = value.multipliedBy(new bignumber_js_1.default(-1));\n  }\n\n  return utils_codec_1.numberToPaddedHex(value);\n}\n\nexports.getHexMagnitudeOfBigInt = getHexMagnitudeOfBigInt;\n\nfunction flipBufferBitsInPlace(buffer) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] = ~buffer[i];\n  }\n}\n\nexports.flipBufferBitsInPlace = flipBufferBitsInPlace;\n\nfunction prependByteToBuffer(buffer, byte) {\n  return Buffer.concat([Buffer.from([byte]), buffer]);\n}\n\nexports.prependByteToBuffer = prependByteToBuffer;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;AAEA;;;;;;;AAKA,SAAgBA,QAAhB,CAAyBC,MAAzB,EAA8D;EAAA,IAArBC,SAAqB,uEAAD,CAAC;EAC1D,IAAIC,IAAI,GAAGF,MAAM,CAACC,SAAD,CAAjB;EACA,IAAIE,GAAG,GAAGD,IAAI,IAAI,CAAlB;EACA,IAAIE,KAAK,GAAGD,GAAG,IAAI,CAAnB;EACA,OAAOC,KAAP;AACH;;AALDC;AAOA;;;;;;AAKA,SAAgBC,SAAhB,CAA0BN,MAA1B,EAA+D;EAAA,IAArBC,SAAqB,uEAAD,CAAC;EAC3D,OAAO,CAACF,QAAQ,CAACC,MAAD,EAASC,SAAT,CAAhB;AACH;;AAFDI;;AAIA,SAAgBE,WAAhB,CAA4BP,MAA5B,EAA0C;EACtC,IAAIQ,KAAK,GAAGC,MAAM,CAACC,KAAP,CAAaV,MAAM,CAACW,MAApB,CAAZ;EACAX,MAAM,CAACY,IAAP,CAAYJ,KAAZ;EACA,OAAOA,KAAP;AACH;;AAJDH;;AAMA,SAAgBQ,cAAhB,CAA+Bb,MAA/B,EAA6C;EACzC;EACA,IAAIc,GAAG,GAAGd,MAAM,CAACe,QAAP,CAAgB,KAAhB,CAAV;EACA,OAAO,IAAIC,sBAAJ,CAAc,KAAKF,GAAG,EAAtB,EAA0B,EAA1B,CAAP;AACH;;AAJDT;;AAMA,SAAgBY,cAAhB,CAA+BC,KAA/B,EAA+C;EAC3C;EACA,IAAIJ,GAAG,GAAGK,uBAAuB,CAACD,KAAD,CAAjC;EACA,OAAOT,MAAM,CAACW,IAAP,CAAYN,GAAZ,EAAiB,KAAjB,CAAP;AACH;;AAJDT;;AAMA,SAAgBc,uBAAhB,CAAwCD,KAAxC,EAAwD;EACpD,IAAI,CAACA,KAAL,EAAY;IACR,OAAO,EAAP;EACH;;EAED,IAAIA,KAAK,CAACG,UAAN,EAAJ,EAAwB;IACpBH,KAAK,GAAGA,KAAK,CAACI,YAAN,CAAmB,IAAIN,sBAAJ,CAAc,CAAC,CAAf,CAAnB,CAAR;EACH;;EAED,OAAOO,gCAAkBL,KAAlB,CAAP;AACH;;AAVDb;;AAYA,SAAgBmB,qBAAhB,CAAsCxB,MAAtC,EAAoD;EAChD,KAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,MAAM,CAACW,MAA3B,EAAmCc,CAAC,EAApC,EAAwC;IACpCzB,MAAM,CAACyB,CAAD,CAAN,GAAY,CAACzB,MAAM,CAACyB,CAAD,CAAnB;EACH;AACJ;;AAJDpB;;AAMA,SAAgBqB,mBAAhB,CAAoC1B,MAApC,EAAoDE,IAApD,EAAgE;EAC5D,OAAOO,MAAM,CAACkB,MAAP,CAAc,CAAClB,MAAM,CAACW,IAAP,CAAY,CAAClB,IAAD,CAAZ,CAAD,EAAsBF,MAAtB,CAAd,CAAP;AACH;;AAFDK","names":["isMsbOne","buffer","byteIndex","byte","bit","isSet","exports","isMsbZero","cloneBuffer","clone","Buffer","alloc","length","copy","bufferToBigInt","hex","toString","bignumber_js_1","bigIntToBuffer","value","getHexMagnitudeOfBigInt","from","isNegative","multipliedBy","utils_codec_1","flipBufferBitsInPlace","i","prependByteToBuffer","concat"],"sourceRoot":"","sources":["../../../src/smartcontracts/codec/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}