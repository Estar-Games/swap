{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SmartContract = void 0;\n\nconst address_1 = require(\"../address\");\n\nconst transaction_1 = require(\"../transaction\");\n\nconst transactionPayload_1 = require(\"../transactionPayload\");\n\nconst codeMetadata_1 = require(\"./codeMetadata\");\n\nconst transactionPayloadBuilders_1 = require(\"./transactionPayloadBuilders\");\n\nconst function_1 = require(\"./function\");\n\nconst query_1 = require(\"./query\");\n\nconst utils_1 = require(\"../utils\");\n\nconst utils_2 = require(\"./codec/utils\");\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst interaction_1 = require(\"./interaction\");\n\nconst nativeSerializer_1 = require(\"./nativeSerializer\");\n\nconst errors_1 = require(\"../errors\");\n\nconst createKeccakHash = require(\"keccak\");\n/**\n * An abstraction for deploying and interacting with Smart Contracts.\n */\n\n\nclass SmartContract {\n  /**\n   * Create a SmartContract object by providing its address on the Network.\n   */\n  constructor(_ref) {\n    let {\n      address,\n      abi\n    } = _ref;\n    this.address = new address_1.Address();\n    /**\n     * This object contains a function for each endpoint defined by the contract.\n     * (a bit similar to web3js's \"contract.methods\").\n     */\n\n    this.methodsExplicit = {};\n    /**\n     * This object contains a function for each endpoint defined by the contract.\n     * (a bit similar to web3js's \"contract.methods\").\n     *\n     * This is an alternative to {@link methodsExplicit}.\n     * Unlike {@link methodsExplicit}, automatic type inference (wrt. ABI) is applied when using {@link methods}.\n     */\n\n    this.methods = {};\n    this.address = address || new address_1.Address();\n    this.abi = abi;\n\n    if (abi) {\n      this.setupMethods();\n    }\n  }\n\n  setupMethods() {\n    let contract = this;\n    let abi = this.getAbi();\n\n    for (const definition of abi.getAllEndpoints()) {\n      let functionName = definition.name; // For each endpoint defined by the ABI, we attach a function to the \"methods\" and \"methodsAuto\" objects,\n      // a function that receives typed values as arguments\n      // and returns a prepared contract interaction.\n\n      this.methodsExplicit[functionName] = function (args) {\n        let func = new function_1.ContractFunction(functionName);\n        let interaction = new interaction_1.Interaction(contract, func, args || []);\n        return interaction;\n      };\n\n      this.methods[functionName] = function (args) {\n        let func = new function_1.ContractFunction(functionName); // Perform automatic type inference, wrt. the endpoint definition:\n\n        let typedArgs = nativeSerializer_1.NativeSerializer.nativeToTypedValues(args || [], definition);\n        let interaction = new interaction_1.Interaction(contract, func, typedArgs || []);\n        return interaction;\n      };\n    }\n  }\n  /**\n   * Sets the address, as on Network.\n   */\n\n\n  setAddress(address) {\n    this.address = address;\n  }\n  /**\n   * Gets the address, as on Network.\n   */\n\n\n  getAddress() {\n    return this.address;\n  }\n\n  setAbi(abi) {\n    this.abi = abi;\n  }\n\n  getAbi() {\n    utils_1.guardValueIsSet(\"abi\", this.abi);\n    return this.abi;\n  }\n\n  getEndpoint(name) {\n    return this.getAbi().getEndpoint(name);\n  }\n  /**\n   * Creates a {@link Transaction} for deploying the Smart Contract to the Network.\n   */\n\n\n  deploy(_ref2) {\n    let {\n      code,\n      codeMetadata,\n      initArguments,\n      value,\n      gasLimit,\n      gasPrice,\n      chainID\n    } = _ref2;\n    codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n    initArguments = initArguments || [];\n    value = value || 0;\n    let payload = transactionPayload_1.TransactionPayload.contractDeploy().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: address_1.Address.Zero(),\n      value: value,\n      gasLimit: gasLimit,\n      gasPrice: gasPrice,\n      data: payload,\n      chainID: chainID\n    });\n    return transaction;\n  }\n  /**\n   * Creates a {@link Transaction} for upgrading the Smart Contract on the Network.\n   */\n\n\n  upgrade(_ref3) {\n    let {\n      code,\n      codeMetadata,\n      initArguments,\n      value,\n      gasLimit,\n      gasPrice,\n      chainID\n    } = _ref3;\n    this.ensureHasAddress();\n    codeMetadata = codeMetadata || new codeMetadata_1.CodeMetadata();\n    initArguments = initArguments || [];\n    value = value || 0;\n    let payload = transactionPayload_1.TransactionPayload.contractUpgrade().setCode(code).setCodeMetadata(codeMetadata).setInitArgs(initArguments).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: this.getAddress(),\n      value: value,\n      gasLimit: gasLimit,\n      gasPrice: gasPrice,\n      data: payload,\n      chainID: chainID\n    });\n    return transaction;\n  }\n  /**\n   * Creates a {@link Transaction} for calling (a function of) the Smart Contract.\n   */\n\n\n  call(_ref4) {\n    let {\n      func,\n      args,\n      value,\n      gasLimit,\n      receiver,\n      gasPrice,\n      chainID\n    } = _ref4;\n    this.ensureHasAddress();\n    args = args || [];\n    value = value || 0;\n    let payload = transactionPayload_1.TransactionPayload.contractCall().setFunction(func).setArgs(args).build();\n    let transaction = new transaction_1.Transaction({\n      receiver: receiver ? receiver : this.getAddress(),\n      value: value,\n      gasLimit: gasLimit,\n      gasPrice: gasPrice,\n      data: payload,\n      chainID: chainID\n    });\n    return transaction;\n  }\n\n  createQuery(_ref5) {\n    let {\n      func,\n      args,\n      value,\n      caller\n    } = _ref5;\n    this.ensureHasAddress();\n    return new query_1.Query({\n      address: this.getAddress(),\n      func: func,\n      args: args,\n      value: value,\n      caller: caller\n    });\n  }\n\n  ensureHasAddress() {\n    if (!this.getAddress().bech32()) {\n      throw new errors_1.ErrContractHasNoAddress();\n    }\n  }\n  /**\n   * Computes the address of a Smart Contract.\n   * The address is computed deterministically, from the address of the owner and the nonce of the deployment transaction.\n   *\n   * @param owner The owner of the Smart Contract\n   * @param nonce The owner nonce used for the deployment transaction\n   */\n\n\n  static computeAddress(owner, nonce) {\n    let initialPadding = Buffer.alloc(8, 0);\n    let ownerPubkey = new address_1.Address(owner.bech32()).pubkey();\n    let shardSelector = ownerPubkey.slice(30);\n    let ownerNonceBytes = Buffer.alloc(8);\n    const bigNonce = new bignumber_js_1.default(nonce.valueOf().toString(10));\n    const bigNonceBuffer = utils_2.bigIntToBuffer(bigNonce);\n    ownerNonceBytes.write(bigNonceBuffer.reverse().toString('hex'), 'hex');\n    let bytesToHash = Buffer.concat([ownerPubkey, ownerNonceBytes]);\n    let hash = createKeccakHash(\"keccak256\").update(bytesToHash).digest();\n    let vmTypeBytes = Buffer.from(transactionPayloadBuilders_1.ArwenVirtualMachine, \"hex\");\n    let addressBytes = Buffer.concat([initialPadding, vmTypeBytes, hash.slice(10, 30), shardSelector]);\n    let address = new address_1.Address(addressBytes);\n    return address;\n  }\n\n}\n\nexports.SmartContract = SmartContract;","map":{"version":3,"mappings":"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","names":["createKeccakHash","require","SmartContract","constructor","address","abi","address_1","setupMethods","contract","getAbi","definition","getAllEndpoints","functionName","name","methodsExplicit","args","func","function_1","interaction","interaction_1","methods","typedArgs","nativeSerializer_1","nativeToTypedValues","setAddress","getAddress","setAbi","utils_1","getEndpoint","deploy","code","codeMetadata","initArguments","value","gasLimit","gasPrice","chainID","codeMetadata_1","payload","transactionPayload_1","contractDeploy","setCode","setCodeMetadata","setInitArgs","build","transaction","transaction_1","receiver","Zero","data","upgrade","ensureHasAddress","contractUpgrade","call","contractCall","setFunction","setArgs","createQuery","caller","query_1","bech32","errors_1","computeAddress","owner","nonce","initialPadding","Buffer","alloc","ownerPubkey","pubkey","shardSelector","slice","ownerNonceBytes","bigNonce","bignumber_js_1","valueOf","toString","bigNonceBuffer","utils_2","write","reverse","bytesToHash","concat","hash","update","digest","vmTypeBytes","from","transactionPayloadBuilders_1","addressBytes","exports"],"sourceRoot":"","sources":["../../src/smartcontracts/smartContract.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}