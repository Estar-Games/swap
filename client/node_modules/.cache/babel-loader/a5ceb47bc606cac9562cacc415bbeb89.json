{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HWProvider = void 0;\n\nconst hw_transport_webusb_1 = __importDefault(require(\"@ledgerhq/hw-transport-webusb\"));\n\nconst hw_transport_webhid_1 = __importDefault(require(\"@ledgerhq/hw-transport-webhid\"));\n\nconst hw_transport_u2f_1 = __importDefault(require(\"@ledgerhq/hw-transport-u2f\")); // @ts-ignore\n\n\nconst hw_app_elrond_1 = __importDefault(require(\"@elrondnetwork/hw-app-elrond\"));\n\nconst platform_1 = __importDefault(require(\"platform\"));\n\nconst versioning_1 = require(\"./versioning\");\n\nconst constants_1 = require(\"./constants\");\n\nconst signature_1 = require(\"./signature\");\n\nconst userAddress_1 = require(\"./userAddress\");\n\nconst transactionVersion_1 = require(\"./transactionVersion\");\n\nconst transactionOptions_1 = require(\"./transactionOptions\");\n\nconst errors_1 = require(\"./errors\");\n\nclass HWProvider {\n  constructor() {\n    this.addressIndex = 0;\n  }\n  /**\n   * Creates transport and initialises ledger app.\n   */\n\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const transport = yield this.getTransport();\n        this.hwApp = new hw_app_elrond_1.default(transport);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    });\n  }\n\n  getTransport() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let webUSBSupported = yield hw_transport_webusb_1.default.isSupported();\n      webUSBSupported = webUSBSupported && platform_1.default.name !== \"Opera\";\n\n      if (webUSBSupported) {\n        return yield hw_transport_webusb_1.default.create();\n      }\n\n      let webHIDSupported = yield hw_transport_webhid_1.default.isSupported();\n\n      if (webHIDSupported) {\n        return yield hw_transport_webhid_1.default.open(\"\");\n      }\n\n      return yield hw_transport_u2f_1.default.create();\n    });\n  }\n  /**\n   * Returns true if init() was previously called successfully\n   */\n\n\n  isInitialized() {\n    return !!this.hwApp;\n  }\n  /**\n   * Mocked function, returns isInitialized as an async function\n   */\n\n\n  isConnected() {\n    return new Promise((resolve, _) => resolve(this.isInitialized()));\n  }\n  /**\n   * Performs a login request by setting the selected index in Ledger and returning that address\n   */\n\n\n  login() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      addressIndex: 0\n    };\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hwApp) {\n        throw new errors_1.ErrNotInitialized();\n      }\n\n      yield this.setAddressIndex(options.addressIndex);\n      const {\n        address\n      } = yield this.hwApp.getAddress(0, options.addressIndex, true);\n      return address;\n    });\n  }\n\n  setAddressIndex(addressIndex) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hwApp) {\n        throw new errors_1.ErrNotInitialized();\n      }\n\n      this.addressIndex = addressIndex;\n      yield this.hwApp.setAddress(0, addressIndex);\n    });\n  }\n\n  getAccounts() {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hwApp) {\n        throw new errors_1.ErrNotInitialized();\n      }\n\n      const addresses = [];\n      const startIndex = page * pageSize;\n\n      for (let index = startIndex; index < startIndex + pageSize; index++) {\n        const {\n          address\n        } = yield this.hwApp.getAddress(0, index);\n        addresses.push(address);\n      }\n\n      return addresses;\n    });\n  }\n  /**\n   * Mocks a logout request by returning true\n   */\n\n\n  logout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hwApp) {\n        throw new errors_1.ErrNotInitialized();\n      }\n\n      return true;\n    });\n  }\n  /**\n   * Fetches current selected ledger address\n   */\n\n\n  getAddress() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hwApp) {\n        throw new errors_1.ErrNotInitialized();\n      }\n\n      const {\n        address\n      } = yield this.hwApp.getAddress(0, this.addressIndex);\n      return address;\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hwApp) {\n        throw new errors_1.ErrNotInitialized();\n      }\n\n      const currentAddressBech32 = yield this.getAddress();\n      const currentAddress = new userAddress_1.UserAddress(currentAddressBech32);\n      const signUsingHash = yield this.shouldSignUsingHash();\n\n      if (signUsingHash) {\n        transaction.options = transactionOptions_1.TransactionOptions.withTxHashSignOptions();\n        transaction.version = transactionVersion_1.TransactionVersion.withTxHashSignVersion();\n      }\n\n      const serializedTransaction = transaction.serializeForSigning(currentAddress);\n      const serializedTransactionBuffer = Buffer.from(serializedTransaction);\n      const signature = yield this.hwApp.signTransaction(serializedTransactionBuffer, signUsingHash);\n      transaction.applySignature(signature_1.Signature.fromHex(signature), currentAddress);\n      return transaction;\n    });\n  }\n\n  signTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const tx of transactions) {\n        yield this.signTransaction(tx);\n      }\n\n      return transactions;\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hwApp) {\n        throw new errors_1.ErrNotInitialized();\n      }\n\n      let serializedMessage = message.serializeForSigningRaw();\n      let serializedMessageBuffer = Buffer.from(serializedMessage);\n      const signature = yield this.hwApp.signMessage(serializedMessageBuffer);\n      message.applySignature(signature_1.Signature.fromHex(signature));\n      return message;\n    });\n  }\n\n  tokenLogin(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hwApp) {\n        throw new errors_1.ErrNotInitialized();\n      }\n\n      let addressIndex = options.addressIndex || 0;\n      yield this.setAddressIndex(addressIndex);\n      const {\n        signature,\n        address\n      } = yield this.hwApp.getAddressAndSignAuthToken(0, addressIndex, options.token);\n      return {\n        signature: signature_1.Signature.fromHex(signature),\n        address\n      };\n    });\n  }\n\n  shouldSignUsingHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hwApp) {\n        throw new errors_1.ErrNotInitialized();\n      }\n\n      const config = yield this.hwApp.getAppConfiguration();\n      let diff = versioning_1.compareVersions(config.version, constants_1.LEDGER_TX_HASH_SIGN_MIN_VERSION);\n      return diff >= 0;\n    });\n  }\n\n}\n\nexports.HWProvider = HWProvider;","map":{"version":3,"mappings":"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","names":["HWProvider","constructor","init","transport","getTransport","hwApp","hw_app_elrond_1","error","webUSBSupported","hw_transport_webusb_1","isSupported","platform_1","name","create","webHIDSupported","hw_transport_webhid_1","open","hw_transport_u2f_1","isInitialized","isConnected","Promise","resolve","_","login","options","addressIndex","errors_1","setAddressIndex","address","getAddress","setAddress","getAccounts","page","pageSize","addresses","startIndex","index","push","logout","signTransaction","transaction","currentAddressBech32","currentAddress","userAddress_1","signUsingHash","shouldSignUsingHash","transactionOptions_1","withTxHashSignOptions","version","transactionVersion_1","withTxHashSignVersion","serializedTransaction","serializeForSigning","serializedTransactionBuffer","Buffer","from","signature","applySignature","signature_1","fromHex","signTransactions","transactions","tx","signMessage","message","serializedMessage","serializeForSigningRaw","serializedMessageBuffer","tokenLogin","getAddressAndSignAuthToken","token","config","getAppConfiguration","diff","versioning_1","constants_1","exports"],"sourceRoot":"","sources":["../src/hwProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}