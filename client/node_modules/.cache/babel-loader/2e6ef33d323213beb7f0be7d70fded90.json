{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MultiESDTNFTTransferPayloadBuilder = exports.ESDTNFTTransferPayloadBuilder = exports.ESDTTransferPayloadBuilder = void 0;\n\nconst address_1 = require(\"./address\");\n\nconst argSerializer_1 = require(\"./smartcontracts/argSerializer\");\n\nconst typesystem_1 = require(\"./smartcontracts/typesystem\");\n\nconst tokenPayment_1 = require(\"./tokenPayment\");\n\nconst transactionPayload_1 = require(\"./transactionPayload\");\n\nclass ESDTTransferPayloadBuilder {\n  constructor() {\n    this.payment = tokenPayment_1.TokenPayment.fungibleFromAmount(\"\", \"0\", 0);\n  }\n\n  setPayment(payment) {\n    this.payment = payment;\n    return this;\n  }\n\n  build() {\n    let args = [// The token identifier\n    typesystem_1.BytesValue.fromUTF8(this.payment.tokenIdentifier), // The transfered amount\n    new typesystem_1.BigUIntValue(this.payment.valueOf())];\n    let {\n      argumentsString\n    } = new argSerializer_1.ArgSerializer().valuesToString(args);\n    let data = `ESDTTransfer@${argumentsString}`;\n    return new transactionPayload_1.TransactionPayload(data);\n  }\n\n}\n\nexports.ESDTTransferPayloadBuilder = ESDTTransferPayloadBuilder;\n\nclass ESDTNFTTransferPayloadBuilder {\n  constructor() {\n    this.payment = tokenPayment_1.TokenPayment.nonFungible(\"\", 0);\n    this.destination = new address_1.Address(\"\");\n  }\n\n  setPayment(payment) {\n    this.payment = payment;\n    return this;\n  }\n\n  setDestination(destination) {\n    this.destination = destination;\n    return this;\n  }\n\n  build() {\n    let args = [// The token identifier\n    typesystem_1.BytesValue.fromUTF8(this.payment.tokenIdentifier), // The nonce of the token\n    new typesystem_1.U64Value(this.payment.nonce), // The transfered quantity\n    new typesystem_1.BigUIntValue(this.payment.valueOf()), // The destination address\n    new typesystem_1.AddressValue(this.destination)];\n    let {\n      argumentsString\n    } = new argSerializer_1.ArgSerializer().valuesToString(args);\n    let data = `ESDTNFTTransfer@${argumentsString}`;\n    return new transactionPayload_1.TransactionPayload(data);\n  }\n\n}\n\nexports.ESDTNFTTransferPayloadBuilder = ESDTNFTTransferPayloadBuilder;\n\nclass MultiESDTNFTTransferPayloadBuilder {\n  constructor() {\n    this.payments = [];\n    this.destination = new address_1.Address(\"\");\n  }\n\n  setPayments(payments) {\n    this.payments = payments;\n    return this;\n  }\n\n  setDestination(destination) {\n    this.destination = destination;\n    return this;\n  }\n\n  build() {\n    let args = [// The destination address\n    new typesystem_1.AddressValue(this.destination), // Number of tokens\n    new typesystem_1.U16Value(this.payments.length)];\n\n    for (const payment of this.payments) {\n      args.push(...[// The token identifier\n      typesystem_1.BytesValue.fromUTF8(payment.tokenIdentifier), // The nonce of the token\n      new typesystem_1.U64Value(payment.nonce), // The transfered quantity\n      new typesystem_1.BigUIntValue(payment.valueOf())]);\n    }\n\n    let {\n      argumentsString\n    } = new argSerializer_1.ArgSerializer().valuesToString(args);\n    let data = `MultiESDTNFTTransfer@${argumentsString}`;\n    return new transactionPayload_1.TransactionPayload(data);\n  }\n\n}\n\nexports.MultiESDTNFTTransferPayloadBuilder = MultiESDTNFTTransferPayloadBuilder;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AAEA,MAAaA,0BAAb,CAAuC;EAAvCC;IACI,eAAyBC,4BAAaC,kBAAb,CAAgC,EAAhC,EAAoC,GAApC,EAAyC,CAAzC,CAAzB;EAmBH;;EAjBGC,UAAU,CAACC,OAAD,EAAuB;IAC7B,KAAKA,OAAL,GAAeA,OAAf;IACA,OAAO,IAAP;EACH;;EAEDC,KAAK;IACD,IAAIC,IAAI,GAAiB,CACrB;IACAC,wBAAWC,QAAX,CAAoB,KAAKJ,OAAL,CAAaK,eAAjC,CAFqB,EAGrB;IACA,IAAIF,yBAAJ,CAAiB,KAAKH,OAAL,CAAaM,OAAb,EAAjB,CAJqB,CAAzB;IAOA,IAAI;MAAEC;IAAF,IAAsB,IAAIC,6BAAJ,GAAoBC,cAApB,CAAmCP,IAAnC,CAA1B;IACA,IAAIQ,IAAI,GAAG,gBAAgBH,eAAe,EAA1C;IACA,OAAO,IAAII,uCAAJ,CAAuBD,IAAvB,CAAP;EACH;;AAnBkC;;AAAvCE;;AAsBA,MAAaC,6BAAb,CAA0C;EAA1CjB;IACI,eAAyBC,4BAAaiB,WAAb,CAAyB,EAAzB,EAA6B,CAA7B,CAAzB;IACA,mBAAwB,IAAIC,iBAAJ,CAAY,EAAZ,CAAxB;EA4BH;;EA1BGhB,UAAU,CAACC,OAAD,EAAuB;IAC7B,KAAKA,OAAL,GAAeA,OAAf;IACA,OAAO,IAAP;EACH;;EAEDgB,cAAc,CAACC,WAAD,EAAsB;IAChC,KAAKA,WAAL,GAAmBA,WAAnB;IACA,OAAO,IAAP;EACH;;EAEDhB,KAAK;IACD,IAAIC,IAAI,GAAiB,CACrB;IACAC,wBAAWC,QAAX,CAAoB,KAAKJ,OAAL,CAAaK,eAAjC,CAFqB,EAGrB;IACA,IAAIF,qBAAJ,CAAa,KAAKH,OAAL,CAAakB,KAA1B,CAJqB,EAKrB;IACA,IAAIf,yBAAJ,CAAiB,KAAKH,OAAL,CAAaM,OAAb,EAAjB,CANqB,EAOrB;IACA,IAAIH,yBAAJ,CAAiB,KAAKc,WAAtB,CARqB,CAAzB;IAWA,IAAI;MAAEV;IAAF,IAAsB,IAAIC,6BAAJ,GAAoBC,cAApB,CAAmCP,IAAnC,CAA1B;IACA,IAAIQ,IAAI,GAAG,mBAAmBH,eAAe,EAA7C;IACA,OAAO,IAAII,uCAAJ,CAAuBD,IAAvB,CAAP;EACH;;AA7BqC;;AAA1CE;;AAgCA,MAAaO,kCAAb,CAA+C;EAA/CvB;IACI,gBAA4B,EAA5B;IACA,mBAAwB,IAAImB,iBAAJ,CAAY,EAAZ,CAAxB;EAmCH;;EAjCGK,WAAW,CAACC,QAAD,EAA0B;IACjC,KAAKA,QAAL,GAAgBA,QAAhB;IACA,OAAO,IAAP;EACH;;EAEDL,cAAc,CAACC,WAAD,EAAsB;IAChC,KAAKA,WAAL,GAAmBA,WAAnB;IACA,OAAO,IAAP;EACH;;EAEDhB,KAAK;IACD,IAAIC,IAAI,GAAiB,CACrB;IACA,IAAIC,yBAAJ,CAAiB,KAAKc,WAAtB,CAFqB,EAGrB;IACA,IAAId,qBAAJ,CAAa,KAAKkB,QAAL,CAAcC,MAA3B,CAJqB,CAAzB;;IAOA,KAAK,MAAMtB,OAAX,IAAsB,KAAKqB,QAA3B,EAAqC;MACjCnB,IAAI,CAACqB,IAAL,CAAU,GAAG,CACT;MACApB,wBAAWC,QAAX,CAAoBJ,OAAO,CAACK,eAA5B,CAFS,EAGT;MACA,IAAIF,qBAAJ,CAAaH,OAAO,CAACkB,KAArB,CAJS,EAKT;MACA,IAAIf,yBAAJ,CAAiBH,OAAO,CAACM,OAAR,EAAjB,CANS,CAAb;IAQH;;IAED,IAAI;MAAEC;IAAF,IAAsB,IAAIC,6BAAJ,GAAoBC,cAApB,CAAmCP,IAAnC,CAA1B;IACA,IAAIQ,IAAI,GAAG,wBAAwBH,eAAe,EAAlD;IACA,OAAO,IAAII,uCAAJ,CAAuBD,IAAvB,CAAP;EACH;;AApC0C;;AAA/CE","names":["ESDTTransferPayloadBuilder","constructor","tokenPayment_1","fungibleFromAmount","setPayment","payment","build","args","typesystem_1","fromUTF8","tokenIdentifier","valueOf","argumentsString","argSerializer_1","valuesToString","data","transactionPayload_1","exports","ESDTNFTTransferPayloadBuilder","nonFungible","address_1","setDestination","destination","nonce","MultiESDTNFTTransferPayloadBuilder","setPayments","payments","length","push"],"sourceRoot":"","sources":["../src/tokenTransferBuilders.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}