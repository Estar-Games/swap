{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenPayment = void 0;\n\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nconst errors_1 = require(\"./errors\");\n\nconst EGLDTokenIdentifier = \"EGLD\";\nconst EGLDNumDecimals = 18; // Note: this will actually set the default rounding mode for all BigNumber objects in the environment (in the application / dApp).\n\nbignumber_js_1.default.set({\n  ROUNDING_MODE: 1\n});\n\nclass TokenPayment {\n  // TODO (breaking, next major version): constructor({ ... })\n  constructor(tokenIdentifier, nonce, amountAsBigInteger, numDecimals) {\n    let amount = new bignumber_js_1.default(amountAsBigInteger);\n\n    if (!amount.isInteger() || amount.isNegative()) {\n      throw new errors_1.ErrInvalidArgument(`bad amountAsBigInteger: ${amountAsBigInteger}`);\n    }\n\n    this.tokenIdentifier = tokenIdentifier;\n    this.nonce = nonce;\n    this.amountAsBigInteger = amount;\n    this.numDecimals = numDecimals;\n  }\n\n  static egldFromAmount(amount) {\n    let amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(EGLDNumDecimals).decimalPlaces(0);\n    return this.egldFromBigInteger(amountAsBigInteger);\n  }\n\n  static egldFromBigInteger(amountAsBigInteger) {\n    return new TokenPayment(EGLDTokenIdentifier, 0, amountAsBigInteger, EGLDNumDecimals);\n  }\n\n  static fungibleFromAmount(tokenIdentifier, amount, numDecimals) {\n    let amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n    return this.fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger, numDecimals);\n  }\n\n  static fungibleFromBigInteger(tokenIdentifier, amountAsBigInteger) {\n    let numDecimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    return new TokenPayment(tokenIdentifier, 0, amountAsBigInteger, numDecimals);\n  }\n\n  static nonFungible(tokenIdentifier, nonce) {\n    return new TokenPayment(tokenIdentifier, nonce, 1, 0);\n  }\n\n  static semiFungible(tokenIdentifier, nonce, quantity) {\n    return new TokenPayment(tokenIdentifier, nonce, quantity, 0);\n  }\n\n  static metaEsdtFromAmount(tokenIdentifier, nonce, amount, numDecimals) {\n    let amountAsBigInteger = new bignumber_js_1.default(amount).shiftedBy(numDecimals).decimalPlaces(0);\n    return this.metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n  }\n\n  static metaEsdtFromBigInteger(tokenIdentifier, nonce, amountAsBigInteger) {\n    let numDecimals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    return new TokenPayment(tokenIdentifier, nonce, amountAsBigInteger, numDecimals);\n  }\n\n  toString() {\n    return this.amountAsBigInteger.toFixed(0);\n  }\n\n  valueOf() {\n    return this.amountAsBigInteger;\n  }\n\n  toPrettyString() {\n    return `${this.toRationalNumber()} ${this.tokenIdentifier}`;\n  } // TODO (breaking, next major version): rename to \"toAmount()\", make it private.\n\n\n  toRationalNumber() {\n    return this.amountAsBigInteger.shiftedBy(-this.numDecimals).toFixed(this.numDecimals);\n  }\n\n  isEgld() {\n    return this.tokenIdentifier == EGLDTokenIdentifier;\n  }\n\n  isFungible() {\n    return this.nonce == 0;\n  }\n\n}\n\nexports.TokenPayment = TokenPayment;","map":{"version":3,"mappings":"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","names":["EGLDTokenIdentifier","EGLDNumDecimals","bignumber_js_1","set","ROUNDING_MODE","TokenPayment","constructor","tokenIdentifier","nonce","amountAsBigInteger","numDecimals","amount","isInteger","isNegative","errors_1","egldFromAmount","shiftedBy","decimalPlaces","egldFromBigInteger","fungibleFromAmount","fungibleFromBigInteger","nonFungible","semiFungible","quantity","metaEsdtFromAmount","metaEsdtFromBigInteger","toString","toFixed","valueOf","toPrettyString","toRationalNumber","isEgld","isFungible","exports"],"sourceRoot":"","sources":["../src/tokenPayment.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}