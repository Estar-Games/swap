{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApiNetworkProvider = void 0;\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst accounts_1 = require(\"./accounts\");\n\nconst networkStake_1 = require(\"./networkStake\");\n\nconst networkGeneralStatistics_1 = require(\"./networkGeneralStatistics\");\n\nconst proxyNetworkProvider_1 = require(\"./proxyNetworkProvider\");\n\nconst tokenDefinitions_1 = require(\"./tokenDefinitions\");\n\nconst tokens_1 = require(\"./tokens\");\n\nconst transactions_1 = require(\"./transactions\");\n\nconst transactionStatus_1 = require(\"./transactionStatus\");\n\nconst primitives_1 = require(\"./primitives\");\n\nconst errors_1 = require(\"./errors\");\n\nconst config_1 = require(\"./config\");\n\nconst contractQueryResponse_1 = require(\"./contractQueryResponse\");\n\nconst contractQueryRequest_1 = require(\"./contractQueryRequest\"); // TODO: Find & remove duplicate code between \"ProxyNetworkProvider\" and \"ApiNetworkProvider\".\n\n\nclass ApiNetworkProvider {\n  constructor(url, config) {\n    this.url = url;\n    this.config = Object.assign(Object.assign({}, config_1.defaultAxiosConfig), config);\n    this.backingProxyNetworkProvider = new proxyNetworkProvider_1.ProxyNetworkProvider(url, config);\n  }\n\n  getNetworkConfig() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.backingProxyNetworkProvider.getNetworkConfig();\n    });\n  }\n\n  getNetworkStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.backingProxyNetworkProvider.getNetworkStatus();\n    });\n  }\n\n  getNetworkStakeStatistics() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(\"stake\");\n      let networkStake = networkStake_1.NetworkStake.fromHttpResponse(response);\n      return networkStake;\n    });\n  }\n\n  getNetworkGeneralStatistics() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(\"stats\");\n      let stats = networkGeneralStatistics_1.NetworkGeneralStatistics.fromHttpResponse(response);\n      return stats;\n    });\n  }\n\n  getAccount(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`accounts/${address.bech32()}`);\n      let account = accounts_1.AccountOnNetwork.fromHttpResponse(response);\n      return account;\n    });\n  }\n\n  getFungibleTokensOfAccount(address, pagination) {\n    return __awaiter(this, void 0, void 0, function* () {\n      pagination = pagination || config_1.defaultPagination;\n      let url = `accounts/${address.bech32()}/tokens?${this.buildPaginationParams(pagination)}`;\n      let response = yield this.doGetGeneric(url);\n      let tokens = response.map(item => tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(item)); // TODO: Fix sorting\n\n      tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n      return tokens;\n    });\n  }\n\n  getNonFungibleTokensOfAccount(address, pagination) {\n    return __awaiter(this, void 0, void 0, function* () {\n      pagination = pagination || config_1.defaultPagination;\n      let url = `accounts/${address.bech32()}/nfts?${this.buildPaginationParams(pagination)}`;\n      let response = yield this.doGetGeneric(url);\n      let tokens = response.map(item => tokens_1.NonFungibleTokenOfAccountOnNetwork.fromApiHttpResponse(item)); // TODO: Fix sorting\n\n      tokens.sort((a, b) => a.identifier.localeCompare(b.identifier));\n      return tokens;\n    });\n  }\n\n  getFungibleTokenOfAccount(address, tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`accounts/${address.bech32()}/tokens/${tokenIdentifier}`);\n      let tokenData = tokens_1.FungibleTokenOfAccountOnNetwork.fromHttpResponse(response);\n      return tokenData;\n    });\n  }\n\n  getNonFungibleTokenOfAccount(address, collection, nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let nonceAsHex = new primitives_1.Nonce(nonce).hex();\n      let response = yield this.doGetGeneric(`accounts/${address.bech32()}/nfts/${collection}-${nonceAsHex}`);\n      let tokenData = tokens_1.NonFungibleTokenOfAccountOnNetwork.fromApiHttpResponse(response);\n      return tokenData;\n    });\n  }\n\n  getTransaction(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`transactions/${txHash}`);\n      let transaction = transactions_1.TransactionOnNetwork.fromApiHttpResponse(txHash, response);\n      return transaction;\n    });\n  }\n\n  getTransactionStatus(txHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`transactions/${txHash}?fields=status`);\n      let status = new transactionStatus_1.TransactionStatus(response.status);\n      return status;\n    });\n  }\n\n  sendTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPostGeneric(\"transactions\", tx.toSendable());\n      return response.txHash;\n    });\n  }\n\n  simulateTransaction(tx) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.backingProxyNetworkProvider.simulateTransaction(tx);\n    });\n  }\n\n  queryContract(query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let request = new contractQueryRequest_1.ContractQueryRequest(query).toHttpRequest();\n        let response = yield this.doPostGeneric(\"query\", request);\n        return contractQueryResponse_1.ContractQueryResponse.fromHttpResponse(response);\n      } catch (error) {\n        throw new errors_1.ErrContractQuery(error);\n      }\n    });\n  }\n\n  getDefinitionOfFungibleToken(tokenIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`tokens/${tokenIdentifier}`);\n      let definition = tokenDefinitions_1.DefinitionOfFungibleTokenOnNetwork.fromApiHttpResponse(response);\n      return definition;\n    });\n  }\n\n  getDefinitionOfTokenCollection(collection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGetGeneric(`collections/${collection}`);\n      let definition = tokenDefinitions_1.DefinitionOfTokenCollectionOnNetwork.fromApiHttpResponse(response);\n      return definition;\n    });\n  }\n\n  getNonFungibleToken(collection, nonce) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let nonceAsHex = new primitives_1.Nonce(nonce).hex();\n      let response = yield this.doGetGeneric(`nfts/${collection}-${nonceAsHex}`);\n      let token = tokens_1.NonFungibleTokenOfAccountOnNetwork.fromApiHttpResponse(response);\n      return token;\n    });\n  }\n\n  doGetGeneric(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doGet(resourceUrl);\n      return response;\n    });\n  }\n\n  doPostGeneric(resourceUrl, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.doPost(resourceUrl, payload);\n      return response;\n    });\n  }\n\n  buildPaginationParams(pagination) {\n    return `from=${pagination.from}&size=${pagination.size}`;\n  }\n\n  doGet(resourceUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `${this.url}/${resourceUrl}`;\n\n      try {\n        let response = yield axios_1.default.get(url, this.config);\n        return response.data;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  doPost(resourceUrl, payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let url = `${this.url}/${resourceUrl}`;\n\n      try {\n        let response = yield axios_1.default.post(url, payload, Object.assign(Object.assign({}, this.config), {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }));\n        let responsePayload = response.data;\n        return responsePayload;\n      } catch (error) {\n        this.handleApiError(error, resourceUrl);\n      }\n    });\n  }\n\n  handleApiError(error, resourceUrl) {\n    if (!error.response) {\n      console.warn(error);\n      throw new errors_1.ErrNetworkProvider(resourceUrl, error.toString(), error);\n    }\n\n    let errorData = error.response.data;\n    let originalErrorMessage = errorData.error || errorData.message || JSON.stringify(errorData);\n    throw new errors_1.ErrNetworkProvider(resourceUrl, originalErrorMessage, error);\n  }\n\n}\n\nexports.ApiNetworkProvider = ApiNetworkProvider;","map":{"version":3,"mappings":"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","names":["ApiNetworkProvider","constructor","url","config","Object","config_1","backingProxyNetworkProvider","proxyNetworkProvider_1","getNetworkConfig","getNetworkStatus","getNetworkStakeStatistics","response","doGetGeneric","networkStake","networkStake_1","fromHttpResponse","getNetworkGeneralStatistics","stats","networkGeneralStatistics_1","getAccount","address","bech32","account","accounts_1","getFungibleTokensOfAccount","pagination","buildPaginationParams","tokens","map","item","tokens_1","sort","a","b","identifier","localeCompare","getNonFungibleTokensOfAccount","fromApiHttpResponse","getFungibleTokenOfAccount","tokenIdentifier","tokenData","getNonFungibleTokenOfAccount","collection","nonce","nonceAsHex","primitives_1","hex","getTransaction","txHash","transaction","transactions_1","getTransactionStatus","status","transactionStatus_1","sendTransaction","tx","doPostGeneric","toSendable","simulateTransaction","queryContract","query","request","contractQueryRequest_1","toHttpRequest","contractQueryResponse_1","error","errors_1","getDefinitionOfFungibleToken","definition","tokenDefinitions_1","getDefinitionOfTokenCollection","getNonFungibleToken","token","resourceUrl","doGet","payload","doPost","from","size","axios_1","get","data","handleApiError","post","headers","responsePayload","console","warn","toString","errorData","originalErrorMessage","message","JSON","stringify","exports"],"sourceRoot":"","sources":["../src/apiNetworkProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}