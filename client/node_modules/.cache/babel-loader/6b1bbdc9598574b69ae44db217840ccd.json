{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NullType = exports.TypePlaceholder = exports.isTyped = exports.PrimitiveValue = exports.TypedValue = exports.CustomType = exports.PrimitiveType = exports.TypeCardinality = exports.Type = void 0;\n\nconst reflection_1 = require(\"../../reflection\");\n\nconst utils_1 = require(\"../../utils\");\n/**\n * An abstraction that represents a Type. Handles both generic and non-generic types.\n * Once instantiated as a Type, a generic type is \"closed\" (as opposed to \"open\").\n */\n\n\nclass Type {\n  constructor(name) {\n    let typeParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let cardinality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : TypeCardinality.fixed(1);\n    utils_1.guardValueIsSet(\"name\", name);\n    this.name = name;\n    this.typeParameters = typeParameters;\n    this.cardinality = cardinality;\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  getClassName() {\n    return Type.ClassName;\n  }\n\n  getClassHierarchy() {\n    let prototypes = reflection_1.getJavascriptPrototypesInHierarchy(this, prototype => prototype.belongsToTypesystem);\n    let classNames = prototypes.map(prototype => prototype.getClassName()).reverse();\n    return classNames;\n  }\n  /**\n   * Gets the fully qualified name of the type, to allow for better (efficient and non-ambiguous) type comparison within erdjs' typesystem.\n   */\n\n\n  getFullyQualifiedName() {\n    let joinedTypeParameters = this.getTypeParameters().map(type => type.getFullyQualifiedName()).join(\", \");\n    return this.isGenericType() ? `erdjs:types:${this.getName()}<${joinedTypeParameters}>` : `erdjs:types:${this.getName()}`;\n  }\n\n  hasExactClass(className) {\n    return this.getClassName() == className;\n  }\n\n  hasClassOrSuperclass(className) {\n    let hierarchy = this.getClassHierarchy();\n    return hierarchy.includes(className);\n  }\n\n  getTypeParameters() {\n    return this.typeParameters;\n  }\n\n  isGenericType() {\n    return this.typeParameters.length > 0;\n  }\n\n  getFirstTypeParameter() {\n    utils_1.guardTrue(this.typeParameters.length > 0, \"type parameters length > 0\");\n    return this.typeParameters[0];\n  }\n  /**\n   * Generates type expressions similar to elrond-wasm-rs.\n   */\n\n\n  toString() {\n    let typeParameters = this.getTypeParameters().map(type => type.toString()).join(\", \");\n    let typeParametersExpression = typeParameters ? `<${typeParameters}>` : \"\";\n    return `${this.name}${typeParametersExpression}`;\n  }\n\n  equals(other) {\n    return Type.equals(this, other);\n  }\n\n  static equals(a, b) {\n    return a.getFullyQualifiedName() == b.getFullyQualifiedName();\n  }\n\n  static equalsMany(a, b) {\n    return a.every((type, i) => type.equals(b[i]));\n  }\n\n  static isAssignableFromMany(a, b) {\n    return a.every((type, i) => type.isAssignableFrom(b[i]));\n  }\n\n  differs(other) {\n    return !this.equals(other);\n  }\n\n  valueOf() {\n    return this.name;\n  }\n  /**\n   * Inspired from: https://docs.microsoft.com/en-us/dotnet/api/system.type.isassignablefrom\n   * For (most) generics, type invariance is expected (assumed) - neither covariance, nor contravariance are supported yet (will be supported in a next release).\n   *\n   * One exception though: for {@link OptionType}, we simulate covariance for missing (not provided) values.\n   * For example, Option<u32> is assignable from Option<?>.\n   * For more details, see the implementation of {@link OptionType} and @{@link OptionalType}.\n   *\n   * Also see:\n   *  - https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)\n   *  - https://docs.microsoft.com/en-us/dotnet/standard/generics/covariance-and-contravariance\n   */\n\n\n  isAssignableFrom(other) {\n    let invariantTypeParameters = Type.equalsMany(this.getTypeParameters(), other.getTypeParameters());\n\n    if (!invariantTypeParameters) {\n      return false;\n    }\n\n    let fullyQualifiedNameOfThis = this.getFullyQualifiedName();\n    let fullyQualifiedNamesInHierarchyOfOther = Type.getFullyQualifiedNamesInHierarchy(other);\n\n    if (fullyQualifiedNamesInHierarchyOfOther.includes(fullyQualifiedNameOfThis)) {\n      return true;\n    }\n\n    return other.hasClassOrSuperclass(this.getClassName());\n  }\n\n  static getFullyQualifiedNamesInHierarchy(type) {\n    let prototypes = reflection_1.getJavascriptPrototypesInHierarchy(type, prototype => prototype.belongsToTypesystem);\n    let fullyQualifiedNames = prototypes.map(prototype => prototype.getFullyQualifiedName.call(type));\n    return fullyQualifiedNames;\n  }\n\n  getNamesOfDependencies() {\n    const dependencies = [];\n\n    for (const type of this.typeParameters) {\n      dependencies.push(type.getName());\n      dependencies.push(...type.getNamesOfDependencies());\n    }\n\n    return [...new Set(dependencies)];\n  }\n  /**\n   * Converts the account to a pretty, plain JavaScript object.\n   */\n\n\n  toJSON() {\n    return {\n      name: this.name,\n      typeParameters: this.typeParameters.map(item => item.toJSON())\n    };\n  }\n\n  getCardinality() {\n    return this.cardinality;\n  }\n  /**\n   * A special marker for types within erdjs' typesystem.\n   */\n\n\n  belongsToTypesystem() {}\n\n}\n\nexports.Type = Type;\nType.ClassName = \"Type\";\n/**\n * TODO: Simplify this class, keep only what is needed.\n *\n * An abstraction for defining and operating with the cardinality of a (composite or simple) type.\n *\n * Simple types (the ones that are directly encodable) have a fixed cardinality: [lower = 1, upper = 1].\n * Composite types (not directly encodable) do not follow this constraint. For example:\n *  - VarArgs: [lower = 0, upper = *]\n *  - OptionalResult: [lower = 0, upper = 1]\n */\n\nclass TypeCardinality {\n  constructor(lowerBound, upperBound) {\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n  }\n\n  static fixed(value) {\n    return new TypeCardinality(value, value);\n  }\n\n  static variable(value) {\n    return new TypeCardinality(0, value);\n  }\n\n  isSingular() {\n    return this.lowerBound == 1 && this.upperBound == 1;\n  }\n\n  isSingularOrNone() {\n    return this.lowerBound == 0 && this.upperBound == 1;\n  }\n\n  isComposite() {\n    return this.upperBound != 1;\n  }\n\n  isFixed() {\n    return this.lowerBound == this.upperBound;\n  }\n\n  getLowerBound() {\n    return this.lowerBound;\n  }\n\n  getUpperBound() {\n    return this.upperBound || TypeCardinality.MaxCardinality;\n  }\n\n}\n\nexports.TypeCardinality = TypeCardinality;\n/**\n * An arbitrarily chosen, reasonably large number.\n */\n\nTypeCardinality.MaxCardinality = 4096;\n\nclass PrimitiveType extends Type {\n  constructor(name) {\n    super(name);\n  }\n\n  getClassName() {\n    return PrimitiveType.ClassName;\n  }\n\n}\n\nexports.PrimitiveType = PrimitiveType;\nPrimitiveType.ClassName = \"PrimitiveType\";\n\nclass CustomType extends Type {\n  getClassName() {\n    return CustomType.ClassName;\n  }\n\n}\n\nexports.CustomType = CustomType;\nCustomType.ClassName = \"CustomType\";\n\nclass TypedValue {\n  constructor(type) {\n    this.type = type;\n  }\n\n  getClassName() {\n    return TypedValue.ClassName;\n  }\n\n  getClassHierarchy() {\n    let prototypes = reflection_1.getJavascriptPrototypesInHierarchy(this, prototype => prototype.belongsToTypesystem);\n    let classNames = prototypes.map(prototype => prototype.getClassName()).reverse();\n    return classNames;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  hasExactClass(className) {\n    return this.getClassName() == className;\n  }\n\n  hasClassOrSuperclass(className) {\n    let hierarchy = this.getClassHierarchy();\n    return hierarchy.includes(className);\n  }\n  /**\n   * A special marker for values within erdjs' typesystem.\n   */\n\n\n  belongsToTypesystem() {}\n\n}\n\nexports.TypedValue = TypedValue;\nTypedValue.ClassName = \"TypedValue\";\n\nclass PrimitiveValue extends TypedValue {\n  constructor(type) {\n    super(type);\n  }\n\n  getClassName() {\n    return PrimitiveValue.ClassName;\n  }\n\n}\n\nexports.PrimitiveValue = PrimitiveValue;\nPrimitiveValue.ClassName = \"PrimitiveValue\";\n\nfunction isTyped(value) {\n  return value.belongsToTypesystem !== undefined;\n}\n\nexports.isTyped = isTyped;\n\nclass TypePlaceholder extends Type {\n  constructor() {\n    super(\"...\");\n  }\n\n  getClassName() {\n    return TypePlaceholder.ClassName;\n  }\n\n}\n\nexports.TypePlaceholder = TypePlaceholder;\nTypePlaceholder.ClassName = \"TypePlaceholder\";\n\nclass NullType extends Type {\n  constructor() {\n    super(\"?\");\n  }\n\n  getClassName() {\n    return NullType.ClassName;\n  }\n\n}\n\nexports.NullType = NullType;\nNullType.ClassName = \"NullType\";","map":{"version":3,"mappings":"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","names":["Type","constructor","name","typeParameters","cardinality","TypeCardinality","fixed","utils_1","getName","getClassName","ClassName","getClassHierarchy","prototypes","reflection_1","prototype","belongsToTypesystem","classNames","map","reverse","getFullyQualifiedName","joinedTypeParameters","getTypeParameters","type","join","isGenericType","hasExactClass","className","hasClassOrSuperclass","hierarchy","includes","length","getFirstTypeParameter","toString","typeParametersExpression","equals","other","a","b","equalsMany","every","i","isAssignableFromMany","isAssignableFrom","differs","valueOf","invariantTypeParameters","fullyQualifiedNameOfThis","fullyQualifiedNamesInHierarchyOfOther","getFullyQualifiedNamesInHierarchy","fullyQualifiedNames","call","getNamesOfDependencies","dependencies","push","Set","toJSON","item","getCardinality","exports","lowerBound","upperBound","value","variable","isSingular","isSingularOrNone","isComposite","isFixed","getLowerBound","getUpperBound","MaxCardinality","PrimitiveType","CustomType","TypedValue","getType","PrimitiveValue","isTyped","undefined","TypePlaceholder","NullType"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}