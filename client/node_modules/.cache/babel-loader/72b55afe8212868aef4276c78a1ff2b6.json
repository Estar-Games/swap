{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Struct = exports.StructType = void 0;\n\nconst errors_1 = require(\"../../errors\");\n\nconst fields_1 = require(\"./fields\");\n\nconst types_1 = require(\"./types\");\n\nclass StructType extends types_1.CustomType {\n  constructor(name, fieldsDefinitions) {\n    super(name);\n    this.fieldsDefinitions = [];\n    this.fieldsDefinitions = fieldsDefinitions;\n  }\n\n  getClassName() {\n    return StructType.ClassName;\n  }\n\n  static fromJSON(json) {\n    let definitions = (json.fields || []).map(definition => fields_1.FieldDefinition.fromJSON(definition));\n    return new StructType(json.name, definitions);\n  }\n\n  getFieldsDefinitions() {\n    return this.fieldsDefinitions;\n  }\n\n  getFieldDefinition(name) {\n    return this.fieldsDefinitions.find(item => item.name == name);\n  }\n\n  getNamesOfDependencies() {\n    return fields_1.Fields.getNamesOfTypeDependencies(this.fieldsDefinitions);\n  }\n\n}\n\nexports.StructType = StructType;\nStructType.ClassName = \"StructType\";\n\nclass Struct extends types_1.TypedValue {\n  /**\n   * One can only set fields at initialization time.\n   */\n  constructor(type, fields) {\n    super(type);\n    this.fields = fields;\n    this.fieldsByName = new Map(fields.map(field => [field.name, field]));\n    this.checkTyping();\n  }\n\n  getClassName() {\n    return Struct.ClassName;\n  }\n\n  checkTyping() {\n    let type = this.getType();\n    let definitions = type.getFieldsDefinitions();\n    fields_1.Fields.checkTyping(this.fields, definitions);\n  }\n\n  getFields() {\n    return this.fields;\n  }\n\n  getFieldValue(name) {\n    let field = this.fieldsByName.get(name);\n\n    if (field) {\n      return field.value.valueOf();\n    }\n\n    throw new errors_1.ErrMissingFieldOnStruct(name, this.getType().getName());\n  }\n\n  valueOf() {\n    let result = {};\n\n    for (const field of this.fields) {\n      result[field.name] = field.value.valueOf();\n    }\n\n    return result;\n  }\n\n  equals(other) {\n    if (!this.getType().equals(other.getType())) {\n      return false;\n    }\n\n    let selfFields = this.getFields();\n    let otherFields = other.getFields();\n    return fields_1.Fields.equals(selfFields, otherFields);\n  }\n\n}\n\nexports.Struct = Struct;\nStruct.ClassName = \"Struct\";","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAaA,UAAb,SAAgCC,kBAAhC,CAA0C;EAItCC,YAAYC,IAAZ,EAA0BC,iBAA1B,EAA8D;IAC1D,MAAMD,IAAN;IAHa,yBAAuC,EAAvC;IAIb,KAAKC,iBAAL,GAAyBA,iBAAzB;EACH;;EAEDC,YAAY;IACR,OAAOL,UAAU,CAACM,SAAlB;EACH;;EAEc,OAARC,QAAQ,CAACC,IAAD,EAAsC;IACjD,IAAIC,WAAW,GAAG,CAACD,IAAI,CAACE,MAAL,IAAe,EAAhB,EAAoBC,GAApB,CAAwBC,UAAU,IAAIC,yBAAgBN,QAAhB,CAAyBK,UAAzB,CAAtC,CAAlB;IACA,OAAO,IAAIZ,UAAJ,CAAeQ,IAAI,CAACL,IAApB,EAA0BM,WAA1B,CAAP;EACH;;EAEDK,oBAAoB;IAChB,OAAO,KAAKV,iBAAZ;EACH;;EAEDW,kBAAkB,CAACZ,IAAD,EAAa;IAC3B,OAAO,KAAKC,iBAAL,CAAuBY,IAAvB,CAA4BC,IAAI,IAAIA,IAAI,CAACd,IAAL,IAAaA,IAAjD,CAAP;EACH;;EAEDe,sBAAsB;IAClB,OAAOL,gBAAOM,0BAAP,CAAkC,KAAKf,iBAAvC,CAAP;EACH;;AA5BqC;;AAA1CgB;AACWpB,uBAAY,YAAZ;;AA8BX,MAAaqB,MAAb,SAA4BpB,kBAA5B,CAAsC;EAKlC;;;EAGAC,YAAYoB,IAAZ,EAA8BZ,MAA9B,EAA6C;IACzC,MAAMY,IAAN;IACA,KAAKZ,MAAL,GAAcA,MAAd;IACA,KAAKa,YAAL,GAAoB,IAAIC,GAAJ,CAAQd,MAAM,CAACC,GAAP,CAAWc,KAAK,IAAI,CAACA,KAAK,CAACtB,IAAP,EAAasB,KAAb,CAApB,CAAR,CAApB;IAEA,KAAKC,WAAL;EACH;;EAEDrB,YAAY;IACR,OAAOgB,MAAM,CAACf,SAAd;EACH;;EAEOoB,WAAW;IACf,IAAIJ,IAAI,GAAe,KAAKK,OAAL,EAAvB;IACA,IAAIlB,WAAW,GAAGa,IAAI,CAACR,oBAAL,EAAlB;IACAD,gBAAOa,WAAP,CAAmB,KAAKhB,MAAxB,EAAgCD,WAAhC;EACH;;EAEDmB,SAAS;IACL,OAAO,KAAKlB,MAAZ;EACH;;EAEDmB,aAAa,CAAC1B,IAAD,EAAa;IACtB,IAAIsB,KAAK,GAAG,KAAKF,YAAL,CAAkBO,GAAlB,CAAsB3B,IAAtB,CAAZ;;IACA,IAAIsB,KAAJ,EAAW;MACP,OAAOA,KAAK,CAACM,KAAN,CAAYC,OAAZ,EAAP;IACH;;IAED,MAAM,IAAIC,gCAAJ,CAA4B9B,IAA5B,EAAkC,KAAKwB,OAAL,GAAeO,OAAf,EAAlC,CAAN;EACH;;EAEDF,OAAO;IACH,IAAIG,MAAM,GAAQ,EAAlB;;IAEA,KAAK,MAAMV,KAAX,IAAoB,KAAKf,MAAzB,EAAiC;MAC7ByB,MAAM,CAACV,KAAK,CAACtB,IAAP,CAAN,GAAqBsB,KAAK,CAACM,KAAN,CAAYC,OAAZ,EAArB;IACH;;IAED,OAAOG,MAAP;EACH;;EAEDC,MAAM,CAACC,KAAD,EAAc;IAChB,IAAI,CAAC,KAAKV,OAAL,GAAeS,MAAf,CAAsBC,KAAK,CAACV,OAAN,EAAtB,CAAL,EAA6C;MACzC,OAAO,KAAP;IACH;;IAED,IAAIW,UAAU,GAAG,KAAKV,SAAL,EAAjB;IACA,IAAIW,WAAW,GAAGF,KAAK,CAACT,SAAN,EAAlB;IAEA,OAAOf,gBAAOuB,MAAP,CAAcE,UAAd,EAA0BC,WAA1B,CAAP;EACH;;AA1DiC;;AAAtCnB;AACWC,mBAAY,QAAZ","names":["StructType","types_1","constructor","name","fieldsDefinitions","getClassName","ClassName","fromJSON","json","definitions","fields","map","definition","fields_1","getFieldsDefinitions","getFieldDefinition","find","item","getNamesOfDependencies","getNamesOfTypeDependencies","exports","Struct","type","fieldsByName","Map","field","checkTyping","getType","getFields","getFieldValue","get","value","valueOf","errors_1","getName","result","equals","other","selfFields","otherFields"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/struct.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}