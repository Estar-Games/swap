{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VariadicValue = exports.VariadicType = void 0;\n\nconst types_1 = require(\"./types\");\n\nclass VariadicType extends types_1.Type {\n  constructor(typeParameter) {\n    super(\"Variadic\", [typeParameter], types_1.TypeCardinality.variable());\n  }\n\n  getClassName() {\n    return VariadicType.ClassName;\n  }\n\n}\n\nexports.VariadicType = VariadicType;\nVariadicType.ClassName = \"VariadicType\";\n/**\n * An abstraction that represents a sequence of values held under the umbrella of a variadic input / output parameter.\n *\n * Since at the time of constructing input parameters or decoding output parameters, the length is known,\n * this TypedValue behaves similar to a List.\n */\n\nclass VariadicValue extends types_1.TypedValue {\n  /**\n   *\n   * @param type the type of this TypedValue (an instance of VariadicType), not the type parameter of the VariadicType\n   * @param items the items, having the type type.getFirstTypeParameter()\n   */\n  constructor(type, items) {\n    super(type); // TODO: assert items are of type type.getFirstTypeParameter()\n\n    this.items = items;\n  }\n\n  getClassName() {\n    return VariadicValue.ClassName;\n  }\n\n  static fromItems() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    if (items.length == 0) {\n      return new VariadicValue(new VariadicType(new types_1.TypePlaceholder()), []);\n    }\n\n    let typeParameter = items[0].getType();\n    return new VariadicValue(new VariadicType(typeParameter), items);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  valueOf() {\n    return this.items.map(item => item.valueOf());\n  }\n\n  equals(other) {\n    if (this.getType().differs(other.getType())) {\n      return false;\n    }\n\n    for (let i = 0; i < this.items.length; i++) {\n      let selfItem = this.items[i];\n      let otherItem = other.items[i];\n\n      if (!selfItem.equals(otherItem)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.VariadicValue = VariadicValue;\nVariadicValue.ClassName = \"VariadicValue\";","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA,MAAaA,YAAb,SAAkCC,YAAlC,CAAsC;EAGlCC,YAAYC,aAAZ,EAA+B;IAC3B,MAAM,UAAN,EAAkB,CAACA,aAAD,CAAlB,EAAmCF,wBAAgBG,QAAhB,EAAnC;EACH;;EAEDC,YAAY;IACR,OAAOL,YAAY,CAACM,SAApB;EACH;;AATiC;;AAAtCC;AACWP,yBAAY,cAAZ;AAWX;;;;;;;AAMA,MAAaQ,aAAb,SAAmCP,kBAAnC,CAA6C;EAIzC;;;;;EAKAC,YAAYO,IAAZ,EAAgCC,KAAhC,EAAmD;IAC/C,MAAMD,IAAN,EAD+C,CAG/C;;IAEA,KAAKC,KAAL,GAAaA,KAAb;EACH;;EAEDL,YAAY;IACR,OAAOG,aAAa,CAACF,SAArB;EACH;;EAEe,OAATK,SAAS,GAAuB;IAAA,kCAAnBD,KAAmB;MAAnBA,KAAmB;IAAA;;IACnC,IAAIA,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB;MACnB,OAAO,IAAIJ,aAAJ,CAAkB,IAAIR,YAAJ,CAAiB,IAAIC,uBAAJ,EAAjB,CAAlB,EAA2D,EAA3D,CAAP;IACH;;IAED,IAAIE,aAAa,GAAGO,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,EAApB;IACA,OAAO,IAAIL,aAAJ,CAAkB,IAAIR,YAAJ,CAAiBG,aAAjB,CAAlB,EAAmDO,KAAnD,CAAP;EACH;;EAEDI,QAAQ;IACJ,OAAO,KAAKJ,KAAZ;EACH;;EAEDK,OAAO;IACH,OAAO,KAAKL,KAAL,CAAWM,GAAX,CAAeC,IAAI,IAAIA,IAAI,CAACF,OAAL,EAAvB,CAAP;EACH;;EAEDG,MAAM,CAACC,KAAD,EAAqB;IACvB,IAAI,KAAKN,OAAL,GAAeO,OAAf,CAAuBD,KAAK,CAACN,OAAN,EAAvB,CAAJ,EAA6C;MACzC,OAAO,KAAP;IACH;;IAED,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,KAAL,CAAWE,MAA/B,EAAuCS,CAAC,EAAxC,EAA4C;MACxC,IAAIC,QAAQ,GAAG,KAAKZ,KAAL,CAAWW,CAAX,CAAf;MACA,IAAIE,SAAS,GAAGJ,KAAK,CAACT,KAAN,CAAYW,CAAZ,CAAhB;;MAEA,IAAI,CAACC,QAAQ,CAACJ,MAAT,CAAgBK,SAAhB,CAAL,EAAiC;QAC7B,OAAO,KAAP;MACH;IACJ;;IAED,OAAO,IAAP;EACH;;AArDwC;;AAA7ChB;AACWC,0BAAY,eAAZ","names":["VariadicType","types_1","constructor","typeParameter","variable","getClassName","ClassName","exports","VariadicValue","type","items","fromItems","length","getType","getItems","valueOf","map","item","equals","other","differs","i","selfItem","otherItem"],"sourceRoot":"","sources":["../../../src/smartcontracts/typesystem/variadic.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}